!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(e,"__esModule",{value:!0});var r,o,s=n(1),h=800,u=600,a=1e3,c=3;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES",t[t.COLLISION=2]="COLLISION"}(r||(r={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(o||(o={}));var f=function(){function t(t,e,n,i){this.minX=t,this.minY=e,this.maxX=n,this.maxY=i}return t.prototype.isInBounds=function(t,e,n){return t>=this.minX&&e>=this.minY&&t+n.getWidth()<=this.maxX&&e+n.getHeight()<=this.maxY},t}(),d=function(t){function e(){return t.call(this,0,0,0,0)||this}return i(e,t),e.prototype.isInBounds=function(t,e,n){return!0},e}(f),p=function(){return function(t,e){this.color=t,this.mass=e}}(),l=function(t){function e(e,n,i,r){var o=t.call(this,i,r)||this;return o.width=e,o.height=n,o}return i(e,t),e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e.prototype.render=function(t){t.fillStyle=this.color,t.fillRect(0,0,this.width,this.height)},e}(p),y=function(t){function e(e,n,i){var r=t.call(this,n,i)||this;return r.radius=e,r}return i(e,t),e.prototype.getHeight=function(){return 2*this.radius},e.prototype.getWidth=function(){return 2*this.radius},e.prototype.render=function(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.radius,this.radius,this.radius,0,2*Math.PI),t.fill()},e}(p),v=function(){return function(t,e,n){this.shape=t,this.boundary=e,this.move=n}}(),O=function(t){function e(e,n,i,r,o,s,h){var u=t.call(this,i,r,o)||this;return u.lives=e,u.shotFreq=n,u.shot=s,u.bounties=h,u}return i(e,t),e}(v),m=function(t){function e(e,n,i,r){var o=t.call(this,n,i,r)||this;return o.dmg=e,o}return i(e,t),e}(v),E=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return i(e,t),e}(v),g=function(){function t(){}return t.prototype.move=function(t,e,n,i){throw void 0===e&&(e=0),void 0===n&&(n=null),void 0===i&&(i=null),new Error("Not Implemented!")},t}(),w=function(t){function e(e){var n=t.call(this)||this;return n.vector=e,n}return i(e,t),e.prototype.move=function(t,e,n,i){return void 0===e&&(e=0),void 0===n&&(n=null),void 0===i&&(i=null),s.default.from(this.vector.x*t,this.vector.y*t)},e.prototype.copy=function(){return new e(s.default.fromOther(this.vector))},e.prototype.setRotation=function(t){return this.vector.rotate(t),this},e}(g),S=function(t){function e(e){var n=t.call(this)||this;return n.decSpeed=e,n}return i(e,t),e.prototype.move=function(t,e,n,i){var r=s.default.fromOther(i);return r.scale(0===n.dec?1:n.curr/(n.curr+n.dec)),n.acc>0&&r.add(s.default.construct(n.acc,e)),r},e.prototype.copy=function(){return new e(this.decSpeed)},e.prototype.setRotation=function(t){return this},e}(g),_=function(){function t(t,e){this.url=t,this.q=[];for(var n=0;n<e;n++)this.q.push(new Audio(t))}return t.prototype.play=function(){var t=this,e=this.q.pop();e?(e.load(),e.addEventListener("ended",function(){t.q.push(e)}),e.play()):console.log("Audio Pool is not big enough!",this.url)},t}(),L={PLAYER:new l(20,35,"#6a7fed",0),ASTEROID_S:new y(20,"#ff2766",0),ASTEROID_M:new y(40,"#bb2c5b",0),ASTEROID_L:new y(80,"#a3163e",0),SHOT:new l(5,5,"#ffffff",0),CLOUD:new l(150,150,"#0a1e3a",0)},M={NONE:new d,SHOT:new f(0,0,h,u),CLOUD:new f(-L.CLOUD.width,-L.CLOUD.height,h+L.CLOUD.width,u+L.CLOUD.height)},x={PLAYER:new S(.4),ENEMY_SIMPLE:new w(s.default.from(0,.1)),PLAYER_SHOT:new w(s.default.from(0,-.5)),ENEMY_SHOT:new w(s.default.from(0,.4)),CLOUD:new w(s.default.from(0,.05))},I={PLAYER:new m(1,L.SHOT,M.SHOT,x.PLAYER_SHOT),ENEMY:new m(1,L.SHOT,M.SHOT,x.ENEMY_SHOT)},T={PLAYER:new O(3,0,L.PLAYER,M.NONE,x.PLAYER,I.PLAYER,[]),ASTEROID_S:new O(1,0,L.ASTEROID_S,M.NONE,x.ENEMY_SIMPLE,I.ENEMY,[]),ASTEROID_M:new O(1,0,L.ASTEROID_M,M.NONE,x.ENEMY_SIMPLE,I.ENEMY,[]),ASTEROID_L:new O(1,0,L.ASTEROID_L,M.NONE,x.ENEMY_SIMPLE,I.ENEMY,[])},D={CLOUD:new E(L.CLOUD,M.CLOUD,x.CLOUD)},A={PLAYER_SHOT:new _("audio/player_shot.wav",5)},R=function(){function t(t,e,n,i,r,o){this.id=t,this.type=e,this.x=n,this.y=i,this.rot=r,this.onDestroyed=o,this.rotation=0,this.move=null,this.speed=0,this.move=e.move.copy().setRotation(r)}return t.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1);var i=this.move.move(t),o=s.default.from(this.x,this.y);this.type.boundary.isInBounds(this.x+i.x,this.y+i.y,this.type.shape)?(this.x+=i.x,this.y+=i.y,this.type.boundary instanceof d&&this.warpToOtherSide(o)):this.type!=T.PLAYER&&this.onDestroyed(r.OUT_OF_BOUNDS)},t.prototype.warpToOtherSide=function(t){this.x>h&&!(t.x>h)?this.x=-this.getWidth():this.x-this.getWidth()<0&&!(t.x-this.getWidth()<0)&&(this.x=h),this.y>u&&!(t.y>u)?this.y=-this.getHeight():this.y-this.getHeight()<0&&!(t.y-this.getHeight()<0)&&(this.y=u)},t.prototype.isCollidingWith=function(t){return!1},t.prototype.render=function(t){t.save(),t.translate(this.x+.5*this.getWidth(),this.y+.5*B.getHeight()),t.rotate(s.rad(this.rotation)),t.translate(-.5*this.getWidth(),-.5*this.getHeight()),this.type.shape.render(t),t.restore()},t.prototype.getWidth=function(){return this.type.shape.getWidth()},t.prototype.getHeight=function(){return this.type.shape.getHeight()},t.prototype.getColor=function(){return this.type.shape.color},t}(),b=function(t){function e(e,n,i,h,u,a){var c=t.call(this,e,n,i,h,u,a)||this;return c.type=n,c.moveVector=s.default.zero(),c.onHit=function(t){if(t instanceof P){if(t.initiator==c.type)return;c.type.bounties.forEach(function(e){e(c,t,o.HIT)}),c.lives-=t.type.dmg,tt(0)}else c.lives--,tt(0);c.lives<1&&c.onDestroyed(r.LIVES)},c.lives=n.lives,c}return i(e,t),e.prototype.isAlive=function(){return this.lives>0},e.prototype.isInBounds=function(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)},e.prototype.update=function(e,n,i){if(void 0===n&&(n=0),void 0===i&&(i=!1),t.prototype.update.call(this,e,n,i),this.type!==T.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}},e.prototype.shoot=function(){var t=J,e=new P(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y+this.getHeight()/2,this.rotation,function(e){K.delete(t)});return this.moveVector.add(s.default.construct(.65,this.rotation).scale(-1)),this.speed=Math.min(8,this.speed+.65),K.set(t,e),J++,A.PLAYER_SHOT.play(),e},e}(R),H=function(t){function e(e,n,i,r,o,s){var h=t.call(this,e,n,i,r,o,s)||this;return h.type=n,h}return i(e,t),e.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1),this.rotation=s.mod(this.rotation+.2*e*t,360);var i=this.speed;this.speed=Math.max(0,this.speed-.4*t/100);var r=i-this.speed,o=0;i=this.speed,n&&(this.speed=Math.min(8,this.speed+1*t/100),o=this.speed-i),this.moveVector=this.move.move(t,this.rotation,{curr:i,dec:r,acc:o},this.moveVector);var h=s.default.from(this.x,this.y);this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.warpToOtherSide(h)},e}(b),P=function(t){function e(e,n,i,r,o,s,h){var u=t.call(this,e,i,r,o,s,h)||this;return u.initiator=n,u.type=i,u}return i(e,t),e.prototype.isCollidingWith=function(e){return t.prototype.isCollidingWith.call(this,e)&&this.initiator!==e.type},e}(R),Y=function(t){function e(e,n,i,r,o,s){return t.call(this,e,n,i,r,o,s)||this}return i(e,t),e}(R),N=document.getElementById("canvas").getContext("2d"),C=document.createElement("canvas");C.width=h,C.height=u;var U=C.getContext("2d"),W=null,j={space:!1,left:!1,right:!1,up:!1,down:!1},k={space:!1,left:!1,right:!1,up:!1,down:!1},B=new H(0,T.PLAYER,0,0,0,function(){$=!1,alert("Game over!")});B.x=h/2-B.getWidth()/2,B.y=u-B.getHeight();var V=0,q=document.getElementById("score_text"),F=document.getElementById("lives_text"),z=0,X=0,J=0,G=0,Z=new Map,K=new Map,Q=new Map,$=!0;function tt(t,e){void 0===e&&(e=0),V+=t,B.lives+=e,q.innerText=""+V,F.innerText=""+B.lives}window.addEventListener("keydown",function(t){switch(t.key){case" ":j.space=!0;break;case"ArrowUp":case"w":j.up=!0;break;case"ArrowLeft":case"a":j.left=!0;break;case"ArrowRight":case"d":j.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":j.space=!1;break;case"ArrowUp":case"w":j.up=!1;break;case"ArrowLeft":case"a":j.left=!1;break;case"ArrowRight":case"d":j.right=!1}}),window.requestAnimationFrame(function t(e){if($){W||(W=e);var n=e-W;W=e,function(t){if((z+=t)>a&&(z=0,Math.random()*c<1)){var e=X,n=T.ASTEROID_M;switch(Math.floor(10*Math.random())){case 0:n=T.ASTEROID_L;break;case 1:n=T.ASTEROID_S}Z.set(e,new b(e,n,Math.random()*(h-n.shape.getWidth()),-n.shape.getHeight(),360*Math.random(),function(t){var n=this;t==r.LIVES&&this.type.bounties.forEach(function(t){return t(n,null,o.DESTROYED)}),Z.delete(e)})),X++}}(n),function(){switch(Math.floor(100*Math.random())){case 1:var t=G;Q.set(t,new Y(t,D.CLOUD,Math.random()*h,-D.CLOUD.shape.getHeight(),0,function(t){Q.delete(this.id)})),G++}}(),function(t){j.space&&!k.space&&B.shoot(),B.update(t,j.left?-1:j.right?1:0,j.up),Z.forEach(function(e){return e.update(t)}),K.forEach(function(e){return e.update(t)}),K.forEach(function(t){t.isCollidingWith(B)&&(B.onHit(t),t.onDestroyed()),Z.forEach(function(e){t.isCollidingWith(e)&&(e.onHit(t),t.onDestroyed(r.COLLISION))})}),Q.forEach(function(e){return e.update(t)})}(n),U.clearRect(0,0,h,u),Q.forEach(function(t){return t.render(U)}),B.render(U),Z.forEach(function(t){return t.render(U)}),K.forEach(function(t){return t.render(U)}),k=JSON.parse(JSON.stringify(j)),N.clearRect(0,0,h,u),N.drawImage(C,0,0),window.requestAnimationFrame(t)}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.x=t,this.y=e}return t.from=function(e,n){return new t(e,n)},t.fromOther=function(e){return new t(e.x,e.y)},t.zero=function(){return new t(0,0)},t.construct=function(e,n){return new t(e*Math.cos(r(n)),e*Math.sin(r(n))).rotate(-90)},t.prototype.isZero=function(){return 0==this.x&&0==this.y},t.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.add=function(e,n){return t.fromOther(e).add(n)},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.rotate=function(e,n){return t.fromOther(e).rotate(n)},t.prototype.rotate=function(t){var e=this.x;return this.x=this.x*Math.cos(r(t))-this.y*Math.sin(r(t)),this.y=e*Math.sin(r(t))+this.y*Math.cos(r(t)),this},t.scale=function(e,n){return t.fromOther(e).scale(n)},t.prototype.scale=function(t){return this.x*=t,this.y*=t,this},t.normalize=function(e){return t.fromOther(e).normalize()},t.prototype.normalize=function(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())},t}();function r(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,