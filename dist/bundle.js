!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(e,"__esModule",{value:!0});var r,o,s=n(1),h=800,u=600,a=1e3,c=3;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES",t[t.COLLISION=2]="COLLISION"}(r||(r={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(o||(o={}));var f=function(){function t(t,e,n,i){this.minX=t,this.minY=e,this.maxX=n,this.maxY=i}return t.prototype.isInBounds=function(t,e,n){return t>=this.minX&&e>=this.minY&&t+n.getWidth()<=this.maxX&&e+n.getHeight()<=this.maxY},t}(),d=function(t){function e(){return t.call(this,0,0,0,0)||this}return i(e,t),e.prototype.isInBounds=function(t,e,n){return!0},e}(f),p=function(){return function(t,e){this.color=t,this.mass=e}}(),l=function(t){function e(e,n,i,r){var o=t.call(this,i,r)||this;return o.width=e,o.height=n,o}return i(e,t),e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e.prototype.render=function(t){t.fillStyle=this.color,t.fillRect(0,0,this.width,this.height)},e}(p),y=function(t){function e(e,n,i){var r=t.call(this,n,i)||this;return r.radius=e,r}return i(e,t),e.prototype.getHeight=function(){return 2*this.radius},e.prototype.getWidth=function(){return 2*this.radius},e.prototype.render=function(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.radius,this.radius,this.radius,0,2*Math.PI),t.fill()},e}(p),v=function(){return function(t,e,n){this.shape=t,this.boundary=e,this.move=n}}(),O=function(t){function e(e,n,i,r,o,s,h){var u=t.call(this,i,r,o)||this;return u.lives=e,u.shotFreq=n,u.shot=s,u.bounties=h,u}return i(e,t),e}(v),m=function(t){function e(e,n,i,r){var o=t.call(this,n,i,r)||this;return o.dmg=e,o}return i(e,t),e}(v),E=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return i(e,t),e}(v),g=function(){function t(){}return t.prototype.move=function(t,e,n,i){throw void 0===e&&(e=0),void 0===n&&(n=null),void 0===i&&(i=null),new Error("Not Implemented!")},t}(),w=function(t){function e(e){var n=t.call(this)||this;return n.vector=e,n}return i(e,t),e.prototype.move=function(t,e,n,i){return void 0===e&&(e=0),void 0===n&&(n=null),void 0===i&&(i=null),s.default.from(this.vector.x*t,this.vector.y*t)},e.prototype.copy=function(){return new e(s.default.fromOther(this.vector))},e.prototype.setRotation=function(t){return this.vector.rotate(t),this},e}(g),S=function(t){function e(e){var n=t.call(this)||this;return n.decSpeed=e,n}return i(e,t),e.prototype.move=function(t,e,n,i){void 0===n&&(n=null),void 0===i&&(i=null);var r=s.default.fromOther(i);return r.scale(0===n.dec?1:n.curr/(n.curr+n.dec)),n.acc>0&&r.add(s.default.construct(n.acc,e)),r},e.prototype.copy=function(){return new e(this.decSpeed)},e.prototype.setRotation=function(t){},e}(g),M={PLAYER:new l(20,35,"#6a7fed",0),ASTEROID_S:new y(20,"#ff2766",0),ASTEROID_M:new y(40,"#bb2c5b",0),ASTEROID_L:new y(80,"#a3163e",0),SHOT:new l(5,5,"#ffffff",0),CLOUD:new l(150,150,"#0a1e3a",0)},x={NONE:new d,SHOT:new f(0,0,h,u),CLOUD:new f(-M.CLOUD.width,-M.CLOUD.height,h+M.CLOUD.width,u+M.CLOUD.height)},_={PLAYER:new S(.4),ENEMY_SIMPLE:new w(s.default.from(0,.1)),PLAYER_SHOT:new w(s.default.from(0,-.5)),ENEMY_SHOT:new w(s.default.from(0,.4)),CLOUD:new w(s.default.from(0,.05))},L={PLAYER:new m(1,M.SHOT,x.SHOT,_.PLAYER_SHOT),ENEMY:new m(1,M.SHOT,x.SHOT,_.ENEMY_SHOT)},I={PLAYER:new O(3,0,M.PLAYER,x.NONE,_.PLAYER,L.PLAYER,[]),ASTEROID_S:new O(1,0,M.ASTEROID_S,x.NONE,_.ENEMY_SIMPLE,L.ENEMY,[]),ASTEROID_M:new O(1,0,M.ASTEROID_M,x.NONE,_.ENEMY_SIMPLE,L.ENEMY,[]),ASTEROID_L:new O(1,0,M.ASTEROID_L,x.NONE,_.ENEMY_SIMPLE,L.ENEMY,[])},D={CLOUD:new E(M.CLOUD,x.CLOUD,_.CLOUD)},T=function(){function t(t,e,n,i,r,o){this.id=t,this.type=e,this.x=n,this.y=i,this.rot=r,this.onDestroyed=o,this.rotation=0,this.move=null,this.speed=0,this.move=e.move.copy().setRotation(r)}return t.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1);var i=this.move.move(t),o=s.default.from(this.x,this.y);this.type.boundary.isInBounds(this.x+i.x,this.y+i.y,this.type.shape)?(this.x+=i.x,this.y+=i.y,this.type.boundary instanceof d&&this.warpToOtherSide(o)):this.type!=I.PLAYER&&this.onDestroyed(r.OUT_OF_BOUNDS)},t.prototype.warpToOtherSide=function(t){this.x>h&&!(t.x>h)?this.x=-this.getWidth():this.x-this.getWidth()<0&&!(t.x-this.getWidth()<0)&&(this.x=h),this.y>u&&!(t.y>u)?this.y=-this.getHeight():this.y-this.getHeight()<0&&!(t.y-this.getHeight()<0)&&(this.y=u)},t.prototype.isCollidingWith=function(t){return!1},t.prototype.render=function(t){t.save(),t.translate(this.x+.5*this.getWidth(),this.y+.5*j.getHeight()),t.rotate(s.rad(this.rotation)),t.translate(-.5*this.getWidth(),-.5*this.getHeight()),this.type.shape.render(t),t.restore()},t.prototype.getWidth=function(){return this.type.shape.getWidth()},t.prototype.getHeight=function(){return this.type.shape.getHeight()},t.prototype.getColor=function(){return this.type.shape.color},t}(),b=function(t){function e(e,n,i,h,u,a){var c=t.call(this,e,n,i,h,u,a)||this;return c.type=n,c.moveVector=s.default.zero(),c.onHit=function(t){if(t instanceof A){if(t.initiator==c.type)return;c.type.bounties.forEach(function(e){e(c,t,o.HIT)}),c.lives-=t.type.dmg,Q(0)}else c.lives--,Q(0);c.lives<1&&c.onDestroyed(r.LIVES)},c.lives=n.lives,c}return i(e,t),e.prototype.isAlive=function(){return this.lives>0},e.prototype.isInBounds=function(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)},e.prototype.update=function(e,n,i){if(void 0===n&&(n=0),void 0===i&&(i=!1),t.prototype.update.call(this,e,n,i),this.type!==I.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}},e.prototype.shoot=function(){var t=z,e=new A(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y+this.getHeight()/2,this.rotation,function(e){G.delete(t)});return this.moveVector.add(s.default.construct(.65,this.rotation).scale(-1)),this.speed=Math.min(8,this.speed+.65),G.set(t,e),z++,e},e}(T),R=function(t){function e(e,n,i,r,o,s){var h=t.call(this,e,n,i,r,o,s)||this;return h.type=n,h}return i(e,t),e.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1),this.rotation=s.mod(this.rotation+.2*e*t,360);var i=this.speed;this.speed=Math.max(0,this.speed-.4*t/100);var r=i-this.speed,o=0;i=this.speed,n&&(this.speed=Math.min(8,this.speed+1*t/100),o=this.speed-i),this.moveVector=this.move.move(t,this.rotation,{curr:i,dec:r,acc:o});var h=s.default.from(this.x,this.y);this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.warpToOtherSide(h)},e}(b),A=function(t){function e(e,n,i,r,o,s,h){var u=t.call(this,e,i,r,o,s,h)||this;return u.initiator=n,u.type=i,u}return i(e,t),e.prototype.isCollidingWith=function(e){return t.prototype.isCollidingWith.call(this,e)&&this.initiator!==e.type},e}(T),H=function(t){function e(e,n,i,r,o,s){return t.call(this,e,n,i,r,o,s)||this}return i(e,t),e}(T),N=document.getElementById("canvas").getContext("2d"),Y=document.createElement("canvas");Y.width=h,Y.height=u;var P=Y.getContext("2d"),C=null,U={space:!1,left:!1,right:!1,up:!1,down:!1},W={space:!1,left:!1,right:!1,up:!1,down:!1},j=new R(0,I.PLAYER,0,0,0,function(){K=!1,alert("Game over!")});j.x=h/2-j.getWidth()/2,j.y=u-j.getHeight();var k=0,B=document.getElementById("score_text"),V=document.getElementById("lives_text"),F=0,q=0,z=0,X=0,J=new Map,G=new Map,Z=new Map,K=!0;function Q(t,e){void 0===e&&(e=0),k+=t,j.lives+=e,B.innerText=""+k,V.innerText=""+j.lives}window.addEventListener("keydown",function(t){switch(t.key){case" ":U.space=!0;break;case"ArrowUp":case"w":U.up=!0;break;case"ArrowLeft":case"a":U.left=!0;break;case"ArrowRight":case"d":U.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":U.space=!1;break;case"ArrowUp":case"w":U.up=!1;break;case"ArrowLeft":case"a":U.left=!1;break;case"ArrowRight":case"d":U.right=!1}}),window.requestAnimationFrame(function t(e){if(K){C||(C=e);var n=e-C;C=e,function(t){if((F+=t)>a&&(F=0,Math.random()*c<1)){var e=q,n=I.ASTEROID_M;switch(Math.floor(10*Math.random())){case 0:n=I.ASTEROID_L;break;case 1:n=I.ASTEROID_S}J.set(e,new b(e,n,Math.random()*(h-n.shape.getWidth()),-n.shape.getHeight(),360*Math.random(),function(t){var n=this;t==r.LIVES&&this.type.bounties.forEach(function(t){return t(n,null,o.DESTROYED)}),J.delete(e)})),q++}}(n),function(){switch(Math.floor(100*Math.random())){case 1:var t=X;Z.set(t,new H(t,D.CLOUD,Math.random()*h,-D.CLOUD.shape.getHeight(),0,function(t){Z.delete(this.id)})),X++}}(),function(t){U.space&&!W.space&&j.shoot(),j.update(t,U.left?-1:U.right?1:0,U.up),J.forEach(function(e){return e.update(t)}),G.forEach(function(e){return e.update(t)}),G.forEach(function(t){t.isCollidingWith(j)&&(j.onHit(t),t.onDestroyed()),J.forEach(function(e){t.isCollidingWith(e)&&(e.onHit(t),t.onDestroyed(r.COLLISION))})}),Z.forEach(function(e){return e.update(t)})}(n),P.clearRect(0,0,h,u),Z.forEach(function(t){return t.render(P)}),j.render(P),J.forEach(function(t){return t.render(P)}),G.forEach(function(t){return t.render(P)}),W=JSON.parse(JSON.stringify(U)),N.clearRect(0,0,h,u),N.drawImage(Y,0,0),window.requestAnimationFrame(t)}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.x=t,this.y=e}return t.from=function(e,n){return new t(e,n)},t.fromOther=function(e){return new t(e.x,e.y)},t.zero=function(){return new t(0,0)},t.construct=function(e,n){return new t(e*Math.cos(r(n)),e*Math.sin(r(n))).rotate(-90)},t.prototype.isZero=function(){return 0==this.x&&0==this.y},t.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.add=function(e,n){return t.fromOther(e).add(n)},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.rotate=function(e,n){return t.fromOther(e).rotate(n)},t.prototype.rotate=function(t){var e=this.x;return this.x=this.x*Math.cos(r(t))-this.y*Math.sin(r(t)),this.y=e*Math.sin(r(t))+this.y*Math.cos(r(t)),this},t.scale=function(e,n){return t.fromOther(e).scale(n)},t.prototype.scale=function(t){return this.x*=t,this.y*=t,this},t.normalize=function(e){return t.fromOther(e).normalize()},t.prototype.normalize=function(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())},t}();function r(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FzdGVyb2lkcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmVjdG9yLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiRGVhdGhDYXVzZUVudW0iLCJIaXRUeXBlRW51bSIsInZlY3Rvcl8xIiwiV0lEVEgiLCJIRUlHSFQiLCJFTkVNWV9TUEFXTl9SQVRFIiwiRU5FTVlfU1BBV05fUFJPQkFCSUxJVFkiLCJCb3VuZGFyeSIsIm1pblgiLCJtaW5ZIiwibWF4WCIsIm1heFkiLCJ0aGlzIiwiaXNJbkJvdW5kcyIsIngiLCJ5Iiwic2hhcGUiLCJnZXRXaWR0aCIsImdldEhlaWdodCIsIk5vQm91bmRhcnkiLCJfc3VwZXIiLCJfX2V4dGVuZHMiLCJTaGFwZSIsImNvbG9yIiwibWFzcyIsIlJlY3RhbmdsZSIsIndpZHRoIiwiaGVpZ2h0IiwiX3RoaXMiLCJyZW5kZXIiLCJjb250ZXh0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJDaXJjbGUiLCJyYWRpdXMiLCJiZWdpblBhdGgiLCJhcmMiLCJNYXRoIiwiUEkiLCJmaWxsIiwiR2FtZU9iamVjdFR5cGUiLCJib3VuZGFyeSIsIm1vdmUiLCJVbml0VHlwZSIsImxpdmVzIiwic2hvdEZyZXEiLCJzaG90IiwiYm91bnRpZXMiLCJTaG90VHlwZSIsImRtZyIsIkVudmlyb25tZW50VHlwZSIsIk1vdmUiLCJlbGFwc2VkVGltZSIsInJvdGF0aW9uIiwic3BlZWQiLCJtb3ZlVmVjdG9yIiwiRXJyb3IiLCJDb25zdGFudE1vdmUiLCJ2ZWN0b3IiLCJkZWZhdWx0IiwiZnJvbSIsImNvcHkiLCJmcm9tT3RoZXIiLCJzZXRSb3RhdGlvbiIsInJvdGF0ZSIsIkR5bmFtaWNNb3ZlIiwiZGVjU3BlZWQiLCJzY2FsZSIsImRlYyIsImN1cnIiLCJhY2MiLCJhZGQiLCJjb25zdHJ1Y3QiLCJTaGFwZUVudW0iLCJQTEFZRVIiLCJBU1RFUk9JRF9TIiwiQVNURVJPSURfTSIsIkFTVEVST0lEX0wiLCJTSE9UIiwiQ0xPVUQiLCJCb3VuZGFyeUVudW0iLCJOT05FIiwiTW92ZVR5cGVFbnVtIiwiRU5FTVlfU0lNUExFIiwiUExBWUVSX1NIT1QiLCJFTkVNWV9TSE9UIiwiU2hvdFR5cGVFbnVtIiwiRU5FTVkiLCJVbml0VHlwZUVudW0iLCJFbnZpcm9ubWVudFR5cGVFbnVtIiwiR2FtZU9iamVjdCIsImlkIiwidHlwZSIsInJvdCIsIm9uRGVzdHJveWVkIiwidXBkYXRlIiwibW92ZW1lbnQiLCJvbGQiLCJ3YXJwVG9PdGhlclNpZGUiLCJPVVRfT0ZfQk9VTkRTIiwiaXNDb2xsaWRpbmdXaXRoIiwib3RoZXIiLCJzYXZlIiwidHJhbnNsYXRlIiwicGxheWVyIiwicmFkIiwicmVzdG9yZSIsImdldENvbG9yIiwiVW5pdCIsInplcm8iLCJvbkhpdCIsIlNob3QiLCJpbml0aWF0b3IiLCJmb3JFYWNoIiwiYm91bnR5IiwiSElUIiwidXBkYXRlU3RhdHVzIiwiTElWRVMiLCJpc0FsaXZlIiwiZmxvb3IiLCJyYW5kb20iLCJzaG9vdCIsInNob3RJZENvdW50ZXIiLCJjYXVzZSIsInNob3RzIiwiZGVsZXRlIiwibWluIiwic2V0IiwiUGxheWVyIiwibW9kIiwib2xkU3BlZWQiLCJtYXgiLCJhY2NTcGVlZCIsIkVudmlyb25tZW50IiwiZnJvbnRDb250ZXh0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJiYWNrQ2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImJhY2tDb250ZXh0Iiwic3RhcnQiLCJjdXJyZW50SW5wdXQiLCJzcGFjZSIsImxlZnQiLCJyaWdodCIsInVwIiwiZG93biIsInByaW9ySW5wdXQiLCJydW5uaW5nIiwiYWxlcnQiLCJzY29yZSIsInNjb3JlRWxlbWVudCIsImxpdmVzRWxlbWVudCIsImVuZW15VGltZVRvU3Bhd24iLCJlbmVteUlkQ291bnRlciIsImVudmlyb25tZW50SWRDb3VudGVyIiwiZW5lbWllcyIsIk1hcCIsImVudmlyb25tZW50cyIsInNjb3JlRGVsdGEiLCJoZWFsdGhEZWx0YSIsImlubmVyVGV4dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImxvb3AiLCJ0aW1lc3RhbXAiLCJpZF8xIiwiREVTVFJPWUVEIiwiY3JlYXRlRW5lbXkiLCJjcmVhdGVFbnZpcm9ubWVudCIsImVuZW15IiwiQ09MTElTSU9OIiwiY2xlYXJSZWN0IiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiZHJhd0ltYWdlIiwiVmVjdG9yIiwibWFnbml0dWRlIiwiYW5nbGUiLCJjb3MiLCJzaW4iLCJpc1plcm8iLCJzcXJ0IiwiYSIsImIiLCJvbGRYIiwic2NhbGFyIiwibm9ybWFsaXplIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLGFBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FBQUEsR0FBZ0gsT0FBQU4sRUFBQU0sSUFBcUJDLEtBQUEsS0FBQUQsSUFDckksT0FBQUYsR0FJQXpCLEVBQUE2QixFQUFBLFNBQUExQixHQUNBLElBQUFTLEVBQUFULEtBQUFxQixXQUNBLFdBQTJCLE9BQUFyQixFQUFBLFNBQzNCLFdBQWlDLE9BQUFBLEdBRWpDLE9BREFILEVBQUFVLEVBQUFFLEVBQUEsSUFBQUEsR0FDQUEsR0FJQVosRUFBQWEsRUFBQSxTQUFBaUIsRUFBQUMsR0FBc0QsT0FBQWpCLE9BQUFrQixVQUFBQyxlQUFBMUIsS0FBQXVCLEVBQUFDLElBR3REL0IsRUFBQWtDLEVBQUEsR0FJQWxDLElBQUFtQyxFQUFBLHdiQ2xGQSxJQWlCS0MsRUFNQUMsRUF2QkxDLEVBQUF0QyxFQUFBLEdBRU11QyxFQUFRLElBQ1JDLEVBQVMsSUFPVEMsRUFBbUIsSUFDbkJDLEVBQTBCLEdBTWhDLFNBQUtOLEdBQ0RBLElBQUEsaUNBQ0FBLElBQUEsaUJBQ0FBLElBQUEseUJBSEosQ0FBS0EsV0FNTCxTQUFLQyxHQUNEQSxJQUFBLGFBQ0FBLElBQUEseUJBRkosQ0FBS0EsV0FLTCxJQUFBTSxFQUFBLFdBQ0ksU0FBQUEsRUFBbUJDLEVBQXFCQyxFQUFxQkMsRUFBcUJDLEdBQS9EQyxLQUFBSixPQUFxQkksS0FBQUgsT0FBcUJHLEtBQUFGLE9BQXFCRSxLQUFBRCxPQU10RixPQUhJSixFQUFBWCxVQUFBaUIsV0FBQSxTQUFXQyxFQUFXQyxFQUFXQyxHQUM3QixPQUFPRixHQUFLRixLQUFLSixNQUFRTyxHQUFLSCxLQUFLSCxNQUFTSyxFQUFJRSxFQUFNQyxZQUFlTCxLQUFLRixNQUFTSyxFQUFJQyxFQUFNRSxhQUFnQk4sS0FBS0QsTUFFMUhKLEVBUEEsR0FTQVksRUFBQSxTQUFBQyxHQUNJLFNBQUFELFdBQ0lDLEVBQUFqRCxLQUFBeUMsS0FBTSxFQUFHLEVBQUcsRUFBRyxJQUFFQSxLQU16QixPQVJ5QlMsRUFBQUYsRUFBQUMsR0FLckJELEVBQUF2QixVQUFBaUIsV0FBQSxTQUFXQyxFQUFXQyxFQUFXQyxHQUM3QixPQUFPLEdBRWZHLEVBUkEsQ0FBeUJaLEdBVXpCZSxFQUFBLFdBU0EsT0FSSSxTQUE2QkMsRUFBc0JDLEdBQXRCWixLQUFBVyxRQUFzQlgsS0FBQVksUUFEdkQsR0FXQUMsRUFBQSxTQUFBTCxHQUNJLFNBQUFLLEVBQW1CQyxFQUFzQkMsRUFBZ0JKLEVBQWVDLEdBQXhFLElBQUFJLEVBQ0lSLEVBQUFqRCxLQUFBeUMsS0FBTVcsRUFBT0MsSUFBS1osWUFESGdCLEVBQUFGLFFBQXNCRSxFQUFBRCxXQWdCN0MsT0FqQndCTixFQUFBSSxFQUFBTCxHQUtwQkssRUFBQTdCLFVBQUFzQixVQUFBLFdBQ0ksT0FBT04sS0FBS2UsUUFHaEJGLEVBQUE3QixVQUFBcUIsU0FBQSxXQUNJLE9BQU9MLEtBQUtjLE9BR2hCRCxFQUFBN0IsVUFBQWlDLE9BQUEsU0FBT0MsR0FDSEEsRUFBUUMsVUFBWW5CLEtBQUtXLE1BQ3pCTyxFQUFRRSxTQUFTLEVBQUcsRUFBR3BCLEtBQUtjLE1BQU9kLEtBQUtlLFNBRWhERixFQWpCQSxDQUF3QkgsR0FtQnhCVyxFQUFBLFNBQUFiLEdBQ0ksU0FBQWEsRUFBbUJDLEVBQWdCWCxFQUFlQyxHQUFsRCxJQUFBSSxFQUNJUixFQUFBakQsS0FBQXlDLEtBQU1XLEVBQU9DLElBQUtaLFlBREhnQixFQUFBTSxXQWtCdkIsT0FuQnFCYixFQUFBWSxFQUFBYixHQUtqQmEsRUFBQXJDLFVBQUFzQixVQUFBLFdBQ0ksT0FBTyxFQUFJTixLQUFLc0IsUUFHcEJELEVBQUFyQyxVQUFBcUIsU0FBQSxXQUNJLE9BQU8sRUFBSUwsS0FBS3NCLFFBR3BCRCxFQUFBckMsVUFBQWlDLE9BQUEsU0FBT0MsR0FDSEEsRUFBUUMsVUFBWW5CLEtBQUtXLE1BQ3pCTyxFQUFRSyxZQUNSTCxFQUFRTSxJQUFJeEIsS0FBS3NCLE9BQVF0QixLQUFLc0IsT0FBUXRCLEtBQUtzQixPQUFRLEVBQUcsRUFBSUcsS0FBS0MsSUFDL0RSLEVBQVFTLFFBRWhCTixFQW5CQSxDQUFxQlgsR0FxQnJCa0IsRUFBQSxXQUlBLE9BSEksU0FBNkJ4QixFQUFxQnlCLEVBQTJCQyxHQUFoRDlCLEtBQUFJLFFBQXFCSixLQUFBNkIsV0FBMkI3QixLQUFBOEIsUUFEakYsR0FNQUMsRUFBQSxTQUFBdkIsR0FDSSxTQUFBdUIsRUFBbUJDLEVBQXNCQyxFQUFrQjdCLEVBQWN5QixFQUFvQkMsRUFBbUJJLEVBQXVCQyxHQUF2SSxJQUFBbkIsRUFDSVIsRUFBQWpELEtBQUF5QyxLQUFNSSxFQUFPeUIsRUFBVUMsSUFBSzlCLFlBRGJnQixFQUFBZ0IsUUFBc0JoQixFQUFBaUIsV0FBdUVqQixFQUFBa0IsT0FBdUJsQixFQUFBbUIsYUFHM0ksT0FKdUIxQixFQUFBc0IsRUFBQXZCLEdBSXZCdUIsRUFKQSxDQUF1QkgsR0FPdkJRLEVBQUEsU0FBQTVCLEdBQ0ksU0FBQTRCLEVBQW1CQyxFQUFhakMsRUFBY3lCLEVBQW9CQyxHQUFsRSxJQUFBZCxFQUNJUixFQUFBakQsS0FBQXlDLEtBQU1JLEVBQU95QixFQUFVQyxJQUFLOUIsWUFEYmdCLEVBQUFxQixRQUd2QixPQUp1QjVCLEVBQUEyQixFQUFBNUIsR0FJdkI0QixFQUpBLENBQXVCUixHQU12QlUsRUFBQSxTQUFBOUIsR0FDSSxTQUFBOEIsRUFBWWxDLEVBQWN5QixFQUFvQkMsVUFDMUN0QixFQUFBakQsS0FBQXlDLEtBQU1JLEVBQU95QixFQUFVQyxJQUFLOUIsS0FFcEMsT0FKOEJTLEVBQUE2QixFQUFBOUIsR0FJOUI4QixFQUpBLENBQThCVixHQU05QlcsRUFBQSxXQUNJLFNBQUFBLEtBVUosT0FQSUEsRUFBQXZELFVBQUE4QyxLQUFBLFNBQUtVLEVBQXFCQyxFQUFzQkMsRUFBMkJDLEdBQ3ZFLFdBRHNCLElBQUFGLE1BQUEsUUFBc0IsSUFBQUMsTUFBQSxXQUEyQixJQUFBQyxNQUFBLE1BQ2pFLElBQUlDLE1BQU0scUJBTXhCTCxFQVhBLEdBYUFNLEVBQUEsU0FBQXJDLEdBQ0ksU0FBQXFDLEVBQW1CQyxHQUFuQixJQUFBOUIsRUFDSVIsRUFBQWpELEtBQUF5QyxPQUFPQSxZQURRZ0IsRUFBQThCLFdBaUJ2QixPQWxCMkJyQyxFQUFBb0MsRUFBQXJDLEdBS3ZCcUMsRUFBQTdELFVBQUE4QyxLQUFBLFNBQUtVLEVBQXFCQyxFQUFzQkMsRUFBMkJDLEdBQ3ZFLFlBRHNCLElBQUFGLE1BQUEsUUFBc0IsSUFBQUMsTUFBQSxXQUEyQixJQUFBQyxNQUFBLE1BQ2hFckQsRUFBQXlELFFBQU9DLEtBQUtoRCxLQUFLOEMsT0FBTzVDLEVBQUlzQyxFQUFheEMsS0FBSzhDLE9BQU8zQyxFQUFJcUMsSUFHN0RLLEVBQUE3RCxVQUFBaUUsS0FBUCxXQUNJLE9BQU8sSUFBSUosRUFBYXZELEVBQUF5RCxRQUFPRyxVQUFVbEQsS0FBSzhDLFVBSTNDRCxFQUFBN0QsVUFBQW1FLFlBQVAsU0FBbUJWLEdBRWYsT0FEQXpDLEtBQUs4QyxPQUFPTSxPQUFPWCxHQUNaekMsTUFFZjZDLEVBbEJBLENBQTJCTixHQW9CM0JjLEVBQUEsU0FBQTdDLEdBQ0ksU0FBQTZDLEVBQW9CQyxHQUFwQixJQUFBdEMsRUFDSVIsRUFBQWpELEtBQUF5QyxPQUFPQSxZQURTZ0IsRUFBQXNDLGFBb0J4QixPQXJCMEI3QyxFQUFBNEMsRUFBQTdDLEdBS3RCNkMsRUFBQXJFLFVBQUE4QyxLQUFBLFNBQUtVLEVBQXFCQyxFQUFrQkMsRUFBMkJDLFFBQTNCLElBQUFELE1BQUEsV0FBMkIsSUFBQUMsTUFBQSxNQUNuRSxJQUFJRyxFQUFTeEQsRUFBQXlELFFBQU9HLFVBQVVQLEdBSzlCLE9BSkFHLEVBQU9TLE1BQW9CLElBQWRiLEVBQU1jLElBQVksRUFBSWQsRUFBTWUsTUFBUWYsRUFBTWUsS0FBT2YsRUFBTWMsTUFDaEVkLEVBQU1nQixJQUFNLEdBQ1paLEVBQU9hLElBQUlyRSxFQUFBeUQsUUFBT2EsVUFBVWxCLEVBQU1nQixJQUFLakIsSUFFcENLLEdBSVhPLEVBQUFyRSxVQUFBaUUsS0FBQSxXQUNJLE9BQU8sSUFBSUksRUFBWXJELEtBQUtzRCxXQUdoQ0QsRUFBQXJFLFVBQUFtRSxZQUFBLFNBQVlWLEtBRWhCWSxFQXJCQSxDQUEwQmQsR0F1QnBCc0IsR0FDRkMsT0FBUSxJQUFJakQsRUFBVSxHQUFJLEdBQUksVUFBVyxHQUN6Q2tELFdBQVksSUFBSTFDLEVBNUtDLEdBNEtvQixVQUFXLEdBQ2hEMkMsV0FBWSxJQUFJM0MsRUFBTyxHQUFrQixVQUFXLEdBQ3BENEMsV0FBWSxJQUFJNUMsRUFBTyxHQUFrQixVQUFXLEdBQ3BENkMsS0FBTSxJQUFJckQsRUFBVSxFQUFHLEVBQUcsVUFBVyxHQUNyQ3NELE1BQU8sSUFBSXRELEVBQVUsSUFBSyxJQUFLLFVBQVcsSUFHeEN1RCxHQUNGQyxLQUFNLElBQUk5RCxFQUNWMkQsS0FBTSxJQUFJdkUsRUFBUyxFQUFHLEVBQUdKLEVBQU9DLEdBQ2hDMkUsTUFBTyxJQUFJeEUsR0FBVWtFLEVBQVVNLE1BQU1yRCxPQUFRK0MsRUFBVU0sTUFBTXBELE9BQVF4QixFQUFRc0UsRUFBVU0sTUFBTXJELE1BQU90QixFQUFTcUUsRUFBVU0sTUFBTXBELFNBd0IzSHVELEdBQ0ZSLE9BQVEsSUFBSVQsRUFsTlcsSUFtTnZCa0IsYUFBYyxJQUFJMUIsRUFBYXZELEVBQUF5RCxRQUFPQyxLQUFLLEVBQUcsS0FDOUN3QixZQUFhLElBQUkzQixFQUFhdkQsRUFBQXlELFFBQU9DLEtBQUssR0FBSSxLQUM5Q3lCLFdBQVksSUFBSTVCLEVBQWF2RCxFQUFBeUQsUUFBT0MsS0FBSyxFQUFHLEtBQzVDbUIsTUFBTyxJQUFJdEIsRUFBYXZELEVBQUF5RCxRQUFPQyxLQUFLLEVBQUcsT0FHckMwQixHQUNGWixPQUFRLElBQUkxQixFQUFTLEVBQUd5QixFQUFVSyxLQUFNRSxFQUFhRixLQUFNSSxFQUFhRSxhQUN4RUcsTUFBTyxJQUFJdkMsRUFBUyxFQUFHeUIsRUFBVUssS0FBTUUsRUFBYUYsS0FBTUksRUFBYUcsYUFHckVHLEdBQ0ZkLE9BQVEsSUFBSS9CLEVBQVMsRUFBRyxFQUFHOEIsRUFBVUMsT0FBUU0sRUFBYUMsS0FBTUMsRUFBYVIsT0FBUVksRUFBYVosV0FDbEdDLFdBQVksSUFBSWhDLEVBQVMsRUFBRyxFQUFHOEIsRUFBVUUsV0FBWUssRUFBYUMsS0FBTUMsRUFBYUMsYUFBY0csRUFBYUMsVUFDaEhYLFdBQVksSUFBSWpDLEVBQVMsRUFBRyxFQUFHOEIsRUFBVUcsV0FBWUksRUFBYUMsS0FBTUMsRUFBYUMsYUFBY0csRUFBYUMsVUFDaEhWLFdBQVksSUFBSWxDLEVBQVMsRUFBRyxFQUFHOEIsRUFBVUksV0FBWUcsRUFBYUMsS0FBTUMsRUFBYUMsYUFBY0csRUFBYUMsV0FHOUdFLEdBQ0ZWLE1BQU8sSUFBSTdCLEVBQWdCdUIsRUFBVU0sTUFBT0MsRUFBYUQsTUFBT0csRUFBYUgsUUFTakZXLEVBQUEsV0FNSSxTQUFBQSxFQUE2QkMsRUFBbUJDLEVBQTZCOUUsRUFBa0JDLEVBQWtCOEUsRUFBb0JDLEdBQXhHbEYsS0FBQStFLEtBQW1CL0UsS0FBQWdGLE9BQTZCaEYsS0FBQUUsSUFBa0JGLEtBQUFHLElBQWtCSCxLQUFBaUYsTUFBb0JqRixLQUFBa0YsY0FMOUhsRixLQUFBeUMsU0FBbUIsRUFDbkJ6QyxLQUFBOEIsS0FBYSxLQUVWOUIsS0FBQTBDLE1BQWdCLEVBR3RCMUMsS0FBSzhCLEtBQU9rRCxFQUFLbEQsS0FBS21CLE9BQU9FLFlBQVk4QixHQXdEakQsT0FyRElILEVBQUE5RixVQUFBbUcsT0FBQSxTQUFPM0MsRUFBcUJDLEVBQXNCMkMsUUFBdEIsSUFBQTNDLE1BQUEsUUFBc0IsSUFBQTJDLE9BQUEsR0FDOUMsSUFBSXRELEVBQU85QixLQUFLOEIsS0FBS0EsS0FBS1UsR0FDdEI2QyxFQUFNL0YsRUFBQXlELFFBQU9DLEtBQUtoRCxLQUFLRSxFQUFHRixLQUFLRyxHQUMvQkgsS0FBS2dGLEtBQUtuRCxTQUFTNUIsV0FBV0QsS0FBS0UsRUFBSTRCLEVBQUs1QixFQUFHRixLQUFLRyxFQUFJMkIsRUFBSzNCLEVBQUdILEtBQUtnRixLQUFLNUUsUUFDMUVKLEtBQUtFLEdBQUs0QixFQUFLNUIsRUFDZkYsS0FBS0csR0FBSzJCLEVBQUszQixFQUNYSCxLQUFLZ0YsS0FBS25ELG9CQUFvQnRCLEdBQzlCUCxLQUFLc0YsZ0JBQWdCRCxJQUVsQnJGLEtBQUtnRixNQUFRSixFQUFhZCxRQUNqQzlELEtBQUtrRixZQUFZOUYsRUFBZW1HLGdCQUk5QlQsRUFBQTlGLFVBQUFzRyxnQkFBVixTQUEwQkQsR0FDbEJyRixLQUFLRSxFQUFJWCxLQUFXOEYsRUFBSW5GLEVBQUlYLEdBQzVCUyxLQUFLRSxHQUFNRixLQUFLSyxXQUNYTCxLQUFLRSxFQUFJRixLQUFLSyxXQUFhLEtBQU9nRixFQUFJbkYsRUFBSUYsS0FBS0ssV0FBYSxLQUNqRUwsS0FBS0UsRUFBSVgsR0FDVFMsS0FBS0csRUFBSVgsS0FBWTZGLEVBQUlsRixFQUFJWCxHQUM3QlEsS0FBS0csR0FBTUgsS0FBS00sWUFDWE4sS0FBS0csRUFBSUgsS0FBS00sWUFBYyxLQUFPK0UsRUFBSWxGLEVBQUlILEtBQUtNLFlBQWMsS0FDbkVOLEtBQUtHLEVBQUlYLElBR2pCc0YsRUFBQTlGLFVBQUF3RyxnQkFBQSxTQUFnQkMsR0FFWixPQUFPLEdBR0pYLEVBQUE5RixVQUFBaUMsT0FBUCxTQUFjQyxHQUNWQSxFQUFRd0UsT0FDUnhFLEVBQVF5RSxVQUFVM0YsS0FBS0UsRUFBSSxHQUFNRixLQUFLSyxXQUFZTCxLQUFLRyxFQUFJLEdBQU15RixFQUFPdEYsYUFDeEVZLEVBQVFrQyxPQUFPOUQsRUFBQXVHLElBQUk3RixLQUFLeUMsV0FDeEJ2QixFQUFReUUsV0FBVyxHQUFNM0YsS0FBS0ssWUFBYSxHQUFNTCxLQUFLTSxhQUN0RE4sS0FBS2dGLEtBQUs1RSxNQUFNYSxPQUFPQyxHQUN2QkEsRUFBUTRFLFdBSUxoQixFQUFBOUYsVUFBQXFCLFNBQVAsV0FDSSxPQUFPTCxLQUFLZ0YsS0FBSzVFLE1BQU1DLFlBR3BCeUUsRUFBQTlGLFVBQUFzQixVQUFQLFdBQ0ksT0FBT04sS0FBS2dGLEtBQUs1RSxNQUFNRSxhQUdwQndFLEVBQUE5RixVQUFBK0csU0FBUCxXQUNJLE9BQU8vRixLQUFLZ0YsS0FBSzVFLE1BQU1PLE9BSS9CbUUsRUEvREEsR0FpRUFrQixFQUFBLFNBQUF4RixHQXFCSSxTQUFBd0YsRUFBWWpCLEVBQW1CQyxFQUFnQjlFLEVBQVdDLEVBQVc4RSxFQUFhQyxHQUFsRixJQUFBbEUsRUFDSVIsRUFBQWpELEtBQUF5QyxLQUFNK0UsRUFBSUMsRUFBTTlFLEVBQUdDLEVBQUc4RSxFQUFLQyxJQUFZbEYsWUFEWmdCLEVBQUFnRSxPQXBCeEJoRSxFQUFBMkIsV0FBcUJyRCxFQUFBeUQsUUFBT2tELE9BRTVCakYsRUFBQWtGLE1BQXFCLFNBQUFULEdBQ3hCLEdBQUlBLGFBQWlCVSxFQUFNLENBQ3ZCLEdBQUlWLEVBQU1XLFdBQWFwRixFQUFLZ0UsS0FDeEIsT0FDSmhFLEVBQUtnRSxLQUFLN0MsU0FBU2tFLFFBQVEsU0FBQUMsR0FDdkJBLEVBQU90RixFQUFNeUUsRUFBT3BHLEVBQVlrSCxPQUVwQ3ZGLEVBQUtnQixPQUFTeUQsRUFBTVQsS0FBSzNDLElBQ3pCbUUsRUFBYSxRQUVieEYsRUFBS2dCLFFBQ0x3RSxFQUFhLEdBRWJ4RixFQUFLZ0IsTUFBUSxHQUNiaEIsRUFBS2tFLFlBQVk5RixFQUFlcUgsUUFNcEN6RixFQUFLZ0IsTUFBUWdELEVBQUtoRCxRQWlDMUIsT0F4RG1CdkIsRUFBQXVGLEVBQUF4RixHQTBCZndGLEVBQUFoSCxVQUFBMEgsUUFBQSxXQUNJLE9BQU8xRyxLQUFLZ0MsTUFBUSxHQUd4QmdFLEVBQUFoSCxVQUFBaUIsV0FBQSxXQUNJLE9BQU9ELEtBQUtnRixLQUFLbkQsU0FBUzVCLFdBQVdELEtBQUtFLEVBQUdGLEtBQUtHLEVBQUdILEtBQUtnRixLQUFLNUUsUUFHbkU0RixFQUFBaEgsVUFBQW1HLE9BQUEsU0FBTzNDLEVBQXFCQyxFQUFzQjJDLEdBRTlDLFFBRndCLElBQUEzQyxNQUFBLFFBQXNCLElBQUEyQyxPQUFBLEdBQzlDNUUsRUFBQXhCLFVBQU1tRyxPQUFNNUgsS0FBQXlDLEtBQUN3QyxFQUFhQyxFQUFVMkMsR0FDaENwRixLQUFLZ0YsT0FBU0osRUFBYWQsT0FHL0IsT0FBUXJDLEtBQUtrRixNQUFNbEYsS0FBS21GLFNBQVc1RyxLQUFLZ0YsS0FBSy9DLFdBQ3pDLEtBQUssRUFDRGpDLEtBQUs2RyxVQUlqQmIsRUFBQWhILFVBQUE2SCxNQUFBLFdBQ0ksSUFBSTlCLEVBQUsrQixFQUNMNUUsRUFBTyxJQUFJaUUsRUFBS3BCLEVBQUkvRSxLQUFLZ0YsS0FBTWhGLEtBQUtnRixLQUFLOUMsS0FBTWxDLEtBQUtFLEVBQUlGLEtBQUtLLFdBQWEsRUFBR0wsS0FBS0csRUFBSUgsS0FBS00sWUFBYyxFQUFHTixLQUFLeUMsU0FBVSxTQUFDc0UsR0FDNUhDLEVBQU1DLE9BQU9sQyxLQU1qQixPQUpBL0UsS0FBSzJDLFdBQVdnQixJQUFJckUsRUFBQXlELFFBQU9hLFVBaldoQixJQWlXc0M1RCxLQUFLeUMsVUFBVWMsT0FBTyxJQUN2RXZELEtBQUswQyxNQUFRakIsS0FBS3lGLElBaldSLEVBaVd1QmxILEtBQUswQyxNQWxXM0IsS0FtV1hzRSxFQUFNRyxJQUFJcEMsRUFBSTdDLEdBQ2Q0RSxJQUNPNUUsR0FFZjhELEVBeERBLENBQW1CbEIsR0EwRG5Cc0MsRUFBQSxTQUFBNUcsR0FDSSxTQUFBNEcsRUFBWXJDLEVBQW1CQyxFQUFnQjlFLEVBQVdDLEVBQVc4RSxFQUFhQyxHQUFsRixJQUFBbEUsRUFDSVIsRUFBQWpELEtBQUF5QyxLQUFNK0UsRUFBSUMsRUFBTTlFLEVBQUdDLEVBQUc4RSxFQUFLQyxJQUFZbEYsWUFEWmdCLEVBQUFnRSxTQXdCbkMsT0F6QnFCdkUsRUFBQTJHLEVBQUE1RyxHQUtqQjRHLEVBQUFwSSxVQUFBbUcsT0FBQSxTQUFPM0MsRUFBcUJDLEVBQXNCMkMsUUFBdEIsSUFBQTNDLE1BQUEsUUFBc0IsSUFBQTJDLE9BQUEsR0FDOUNwRixLQUFLeUMsU0FBV25ELEVBQUErSCxJQUFJckgsS0FBS3lDLFNBbFhWLEdBa1hxQkEsRUFBNEJELEVBQWEsS0FDN0UsSUFBSThFLEVBQVd0SCxLQUFLMEMsTUFDcEIxQyxLQUFLMEMsTUFBUWpCLEtBQUs4RixJQUFJLEVBQUd2SCxLQUFLMEMsTUFsWFgsR0FrWHlDRixFQUFjLEtBRTFFLElBQUljLEVBQVdnRSxFQUFXdEgsS0FBSzBDLE1BQzNCOEUsRUFBVyxFQUNmRixFQUFXdEgsS0FBSzBDLE1BQ1owQyxJQUNBcEYsS0FBSzBDLE1BQVFqQixLQUFLeUYsSUF0WFosRUFzWDJCbEgsS0FBSzBDLE1BelhoQyxFQXlYcURGLEVBQWMsS0FFekVnRixFQUFXeEgsS0FBSzBDLE1BQVE0RSxHQUU1QnRILEtBQUsyQyxXQUFhM0MsS0FBSzhCLEtBQUtBLEtBQUtVLEVBQWF4QyxLQUFLeUMsVUFBV2dCLEtBQU02RCxFQUFVOUQsSUFBS0YsRUFBVUksSUFBSzhELElBRWxHLElBQUluQyxFQUFNL0YsRUFBQXlELFFBQU9DLEtBQUtoRCxLQUFLRSxFQUFHRixLQUFLRyxHQUNuQ0gsS0FBS0UsR0FBS0YsS0FBSzJDLFdBQVd6QyxFQUMxQkYsS0FBS0csR0FBS0gsS0FBSzJDLFdBQVd4QyxFQUMxQkgsS0FBS3NGLGdCQUFnQkQsSUFFN0IrQixFQXpCQSxDQUFxQnBCLEdBMkJyQkcsRUFBQSxTQUFBM0YsR0FDSSxTQUFBMkYsRUFBWXBCLEVBQW1CcUIsRUFBNEJwQixFQUFnQjlFLEVBQVdDLEVBQVc4RSxFQUFhQyxHQUE5RyxJQUFBbEUsRUFDSVIsRUFBQWpELEtBQUF5QyxLQUFNK0UsRUFBSUMsRUFBTTlFLEVBQUdDLEVBQUc4RSxFQUFLQyxJQUFZbEYsWUFEWmdCLEVBQUFvRixZQUE0QnBGLEVBQUFnRSxTQU8vRCxPQVJtQnZFLEVBQUEwRixFQUFBM0YsR0FLZjJGLEVBQUFuSCxVQUFBd0csZ0JBQUEsU0FBZ0JDLEdBQ1osT0FBT2pGLEVBQUF4QixVQUFNd0csZ0JBQWVqSSxLQUFBeUMsS0FBQ3lGLElBQVV6RixLQUFLb0csWUFBY1gsRUFBTVQsTUFFeEVtQixFQVJBLENBQW1CckIsR0FVbkIyQyxFQUFBLFNBQUFqSCxHQUNJLFNBQUFpSCxFQUFZMUMsRUFBWUMsRUFBdUI5RSxFQUFXQyxFQUFXOEUsRUFBYUMsVUFDOUUxRSxFQUFBakQsS0FBQXlDLEtBQU0rRSxFQUFJQyxFQUFNOUUsRUFBR0MsRUFBRzhFLEVBQUtDLElBQVlsRixLQUUvQyxPQUowQlMsRUFBQWdILEVBQUFqSCxHQUkxQmlILEVBSkEsQ0FBMEIzQyxHQVN0QjRDLEVBRGtDQyxTQUFTQyxlQUFlLFVBQy9CQyxXQUFXLE1BRXRDQyxFQUFpQ0gsU0FBU0ksY0FBYyxVQUM1REQsRUFBV2hILE1BQVF2QixFQUNuQnVJLEVBQVcvRyxPQUFTdkIsRUFDcEIsSUFBSXdJLEVBQWNGLEVBQVdELFdBQVcsTUFFcENJLEVBQVEsS0FDUkMsR0FDQUMsT0FBTyxFQUNQQyxNQUFNLEVBQ05DLE9BQU8sRUFDUEMsSUFBSSxFQUNKQyxNQUFNLEdBRU5DLEdBQ0FMLE9BQU8sRUFDUEMsTUFBTSxFQUNOQyxPQUFPLEVBQ1BDLElBQUksRUFDSkMsTUFBTSxHQUdOM0MsRUFBUyxJQUFJd0IsRUFBTyxFQUFHeEMsRUFBYWQsT0FBUSxFQUFHLEVBQUcsRUFBRyxXQXdLckQyRSxHQUFVLEVBQ1ZDLE1BQU0sZ0JBdEtWOUMsRUFBTzFGLEVBQUlYLEVBQVEsRUFBSXFHLEVBQU92RixXQUFhLEVBQzNDdUYsRUFBT3pGLEVBQUlYLEVBQVNvRyxFQUFPdEYsWUFDM0IsSUFBSXFJLEVBQVEsRUFDUkMsRUFBZWpCLFNBQVNDLGVBQWUsY0FDdkNpQixFQUFlbEIsU0FBU0MsZUFBZSxjQUV2Q2tCLEVBQW1CLEVBQ25CQyxFQUFpQixFQUNqQmpDLEVBQWdCLEVBQ2hCa0MsRUFBdUIsRUFFdkJDLEVBQVUsSUFBSUMsSUFFZGxDLEVBQVEsSUFBSWtDLElBRVpDLEVBQWUsSUFBSUQsSUFDbkJULEdBQW1CLEVBNkl2QixTQUFTakMsRUFBYTRDLEVBQW9CQyxRQUFBLElBQUFBLE1BQUEsR0FDdENWLEdBQVNTLEVBQ1R4RCxFQUFPNUQsT0FBU3FILEVBQ2hCVCxFQUFhVSxVQUFZLEdBQUtYLEVBQzlCRSxFQUFhUyxVQUFZLEdBQUsxRCxFQUFPNUQsTUFyR3pDdUgsT0FBT0MsaUJBQWlCLFVBcEJ4QixTQUF1QkMsR0FDbkIsT0FBUUEsRUFBTTlLLEtBQ1YsSUFBSyxJQUNEdUosRUFBYUMsT0FBUSxFQUNyQixNQUNKLElBQUssVUFDTCxJQUFLLElBQ0RELEVBQWFJLElBQUssRUFDbEIsTUFDSixJQUFLLFlBQ0wsSUFBSyxJQUNESixFQUFhRSxNQUFPLEVBQ3BCLE1BQ0osSUFBSyxhQUNMLElBQUssSUFDREYsRUFBYUcsT0FBUSxLQTJCakNrQixPQUFPQyxpQkFBaUIsUUFwQnhCLFNBQXFCQyxHQUNqQixPQUFRQSxFQUFNOUssS0FDVixJQUFLLElBQ0R1SixFQUFhQyxPQUFRLEVBQ3JCLE1BQ0osSUFBSyxVQUNMLElBQUssSUFDREQsRUFBYUksSUFBSyxFQUNsQixNQUNKLElBQUssWUFDTCxJQUFLLElBQ0RKLEVBQWFFLE1BQU8sRUFDcEIsTUFDSixJQUFLLGFBQ0wsSUFBSyxJQUNERixFQUFhRyxPQUFRLEtBNEZqQ2tCLE9BQU9HLHNCQXZKUCxTQUFTQyxFQUFLQyxHQUNWLEdBQUtuQixFQUFMLENBRUtSLElBQU9BLEVBQVEyQixHQUNwQixJQUFJcEgsRUFBY29ILEVBQVkzQixFQUM5QkEsRUFBUTJCLEVBNkRaLFNBQXFCcEgsR0FFakIsSUFEQXNHLEdBQW9CdEcsR0FDRy9DLElBQ25CcUosRUFBbUIsRUFDZnJILEtBQUttRixTQUFXbEgsRUFBMEIsR0FBRyxDQUM3QyxJQUFJbUssRUFBS2QsRUFDTC9ELEVBQU9KLEVBQWFaLFdBQ3hCLE9BQVF2QyxLQUFLa0YsTUFBc0IsR0FBaEJsRixLQUFLbUYsV0FDcEIsS0FBSyxFQUNENUIsRUFBT0osRUFBYVgsV0FDcEIsTUFDSixLQUFLLEVBQ0RlLEVBQU9KLEVBQWFiLFdBRzVCa0YsRUFBUTlCLElBQUkwQyxFQUFJLElBQUk3RCxFQUFLNkQsRUFBSTdFLEVBQU12RCxLQUFLbUYsVUFBWXJILEVBQVF5RixFQUFLNUUsTUFBTUMsYUFBYzJFLEVBQUs1RSxNQUFNRSxZQUE2QixJQUFoQm1CLEtBQUttRixTQUFnQixTQUFVRyxHQUFWLElBQUEvRixFQUFBaEIsS0FDMUgrRyxHQUFTM0gsRUFBZXFILE9BQ3hCekcsS0FBS2dGLEtBQUs3QyxTQUFTa0UsUUFBUSxTQUFBQyxHQUFVLE9BQUFBLEVBQU90RixFQUFNLEtBQU0zQixFQUFZeUssYUFFeEViLEVBQVFoQyxPQUFPNEMsTUFFbkJkLEtBaEZSZ0IsQ0FBWXZILEdBcUZoQixXQUNJLE9BQVFmLEtBQUtrRixNQUFzQixJQUFoQmxGLEtBQUttRixXQUNwQixLQUFLLEVBQ0QsSUFBSTdCLEVBQUtpRSxFQUNURyxFQUFhaEMsSUFBSXBDLEVBQUksSUFBSTBDLEVBQVkxQyxFQUFJRixFQUFvQlYsTUFBTzFDLEtBQUttRixTQUFXckgsR0FBUXNGLEVBQW9CVixNQUFNL0QsTUFBTUUsWUFBYSxFQUFHLFNBQVV5RyxHQUNsSm9DLEVBQWFsQyxPQUFPakgsS0FBSytFLE9BRTdCaUUsS0EzRlJnQixHQStGSixTQUFnQnhILEdBQ1IwRixFQUFhQyxRQUFVSyxFQUFXTCxPQUNsQ3ZDLEVBQU9pQixRQUVYakIsRUFBT1QsT0FBTzNDLEVBQWEwRixFQUFhRSxNQUFRLEVBQUtGLEVBQWFHLE1BQVEsRUFBSSxFQUFJSCxFQUFhSSxJQUUvRlcsRUFBUTVDLFFBQVEsU0FBQWhJLEdBQVMsT0FBQUEsRUFBTThHLE9BQU8zQyxLQUN0Q3dFLEVBQU1YLFFBQVEsU0FBQWhJLEdBQVMsT0FBQUEsRUFBTThHLE9BQU8zQyxLQUVwQ3dFLEVBQU1YLFFBQVEsU0FBQW5FLEdBQ05BLEVBQUtzRCxnQkFBZ0JJLEtBQ3JCQSxFQUFPTSxNQUFNaEUsR0FDYkEsRUFBS2dELGVBRVQrRCxFQUFRNUMsUUFBUSxTQUFBNEQsR0FDUi9ILEVBQUtzRCxnQkFBZ0J5RSxLQUNyQkEsRUFBTS9ELE1BQU1oRSxHQUNaQSxFQUFLZ0QsWUFBWTlGLEVBQWU4SyxnQkFJNUNmLEVBQWE5QyxRQUFRLFNBQUFoSSxHQUFTLE9BQUFBLEVBQU04RyxPQUFPM0MsS0FuSDNDMkMsQ0FBTzNDLEdBdUhQd0YsRUFBWW1DLFVBQVUsRUFBRyxFQUFHNUssRUFBT0MsR0FFbkMySixFQUFhOUMsUUFBUSxTQUFBaEksR0FBUyxPQUFBQSxFQUFNNEMsT0FBTytHLEtBRTNDcEMsRUFBTzNFLE9BQU8rRyxHQUVkaUIsRUFBUTVDLFFBQVEsU0FBQWhJLEdBQVMsT0FBQUEsRUFBTTRDLE9BQU8rRyxLQUV0Q2hCLEVBQU1YLFFBQVEsU0FBQWhJLEdBQVMsT0FBQUEsRUFBTTRDLE9BQU8rRyxLQXJIcENRLEVBQWE0QixLQUFLQyxNQUFNRCxLQUFLRSxVQUFVcEMsSUFOdkNSLEVBQWF5QyxVQUFVLEVBQUcsRUFBRzVLLEVBQU9DLEdBQ3BDa0ksRUFBYTZDLFVBQVV6QyxFQUFZLEVBQUcsR0FDdEN5QixPQUFPRyxzQkFBc0JDLHFGQ3pkakMsSUFBQWEsRUFBQSxXQUNJLFNBQUFBLEVBQTJCdEssRUFBa0JDLEdBQWxCSCxLQUFBRSxJQUFrQkYsS0FBQUcsSUE0RWpELE9BekVrQnFLLEVBQUF4SCxLQUFkLFNBQW1COUMsRUFBV0MsR0FDMUIsT0FBTyxJQUFJcUssRUFBT3RLLEVBQUdDLElBR1hxSyxFQUFBdEgsVUFBZCxTQUF3QnVDLEdBQ3BCLE9BQU8sSUFBSStFLEVBQU8vRSxFQUFNdkYsRUFBR3VGLEVBQU10RixJQUd2QnFLLEVBQUF2RSxLQUFkLFdBQ0ksT0FBTyxJQUFJdUUsRUFBTyxFQUFHLElBR1hBLEVBQUE1RyxVQUFkLFNBQXdCNkcsRUFBbUJDLEdBQ3ZDLE9BQU8sSUFBSUYsRUFBT0MsRUFBWWhKLEtBQUtrSixJQUFJOUUsRUFBSTZFLElBQVNELEVBQVloSixLQUFLbUosSUFBSS9FLEVBQUk2RSxLQUFTdEgsUUFBUSxLQUczRm9ILEVBQUF4TCxVQUFBNkwsT0FBUCxXQUNJLE9BQWlCLEdBQVY3SyxLQUFLRSxHQUFvQixHQUFWRixLQUFLRyxHQUd4QnFLLEVBQUF4TCxVQUFBeUwsVUFBUCxXQUNJLE9BQU9oSixLQUFLcUosS0FBSzlLLEtBQUtFLEVBQUlGLEtBQUtFLEVBQUlGLEtBQUtHLEVBQUlILEtBQUtHLElBR3ZDcUssRUFBQTdHLElBQWQsU0FBa0JvSCxFQUFXQyxHQUN6QixPQUFPUixFQUFPdEgsVUFBVTZILEdBQUdwSCxJQUFJcUgsSUFHNUJSLEVBQUF4TCxVQUFBMkUsSUFBUCxTQUFXOEIsR0FHUCxPQUZBekYsS0FBS0UsR0FBS3VGLEVBQU12RixFQUNoQkYsS0FBS0csR0FBS3NGLEVBQU10RixFQUNUSCxNQUdHd0ssRUFBQXBILE9BQWQsU0FBcUJOLEVBQWdCNEgsR0FDakMsT0FBT0YsRUFBT3RILFVBQVVKLEdBQVFNLE9BQU9zSCxJQUdwQ0YsRUFBQXhMLFVBQUFvRSxPQUFQLFNBQWNzSCxHQUNWLElBQUlPLEVBQU9qTCxLQUFLRSxFQUdoQixPQUZBRixLQUFLRSxFQUFJRixLQUFLRSxFQUFJdUIsS0FBS2tKLElBQUk5RSxFQUFJNkUsSUFBVTFLLEtBQUtHLEVBQUlzQixLQUFLbUosSUFBSS9FLEVBQUk2RSxJQUMvRDFLLEtBQUtHLEVBQUk4SyxFQUFPeEosS0FBS21KLElBQUkvRSxFQUFJNkUsSUFBVTFLLEtBQUtHLEVBQUlzQixLQUFLa0osSUFBSTlFLEVBQUk2RSxJQUN0RDFLLE1BR0d3SyxFQUFBakgsTUFBZCxTQUFvQlQsRUFBZ0JvSSxHQUNoQyxPQUFPVixFQUFPdEgsVUFBVUosR0FBUVMsTUFBTTJILElBR25DVixFQUFBeEwsVUFBQXVFLE1BQVAsU0FBYTJILEdBR1QsT0FGQWxMLEtBQUtFLEdBQUtnTCxFQUNWbEwsS0FBS0csR0FBSytLLEVBQ0hsTCxNQUdHd0ssRUFBQVcsVUFBZCxTQUF3QnJJLEdBQ3BCLE9BQU8wSCxFQUFPdEgsVUFBVUosR0FBUXFJLGFBRzdCWCxFQUFBeEwsVUFBQW1NLFVBQVAsV0FDSSxPQUE0QixJQUFyQm5MLEtBQUt5SyxZQUFvQnpLLEtBQU9BLEtBQUt1RCxNQUFNLEVBQUl2RCxLQUFLeUssY0FhbkVELEVBN0VBLEdBbUZBLFNBQWdCM0UsRUFBSWhILEdBQ2hCLE9BQU9BLEdBQUs0QyxLQUFLQyxHQUFLLGlCQUwxQnhFLEVBQUFtSyxJQUFBLFNBQW9CeEksRUFBV3JCLEdBQzNCLE9BQVNxQixFQUFJckIsRUFBS0EsR0FBS0EsR0FHM0JOLEVBQUEySSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJpbXBvcnQgVmVjdG9yLCB7bW9kLCByYWR9IGZyb20gXCIuL3ZlY3RvclwiO1xyXG5cclxuY29uc3QgV0lEVEggPSA4MDA7XHJcbmNvbnN0IEhFSUdIVCA9IDYwMDtcclxuY29uc3QgUk9UQVRJT05fU1BFRUQgPSAwLjI7XHJcbmNvbnN0IEFDQ19TUEVFRCA9IDE7XHJcbmNvbnN0IERFQ0VMRVJBVElPTl9TUEVFRCA9IDAuNDtcclxuY29uc3QgS05PQ0tfQkFDSyA9IDAuNjU7XHJcbmNvbnN0IE1BWF9TUEVFRCA9IDg7XHJcbmNvbnN0IEVORU1ZX1JBRElVUyA9IDIwO1xyXG5jb25zdCBFTkVNWV9TUEFXTl9SQVRFID0gMTAwMDtcclxuY29uc3QgRU5FTVlfU1BBV05fUFJPQkFCSUxJVFkgPSAzO1xyXG5cclxuLy9yZWdpb24gR2FtZU9iamVjdCBwYXJ0c1xyXG50eXBlIEJvdW50eUNhbGxiYWNrID0gKGVuZW15OiBVbml0LCBzaG90OiBTaG90LCB0eXBlOiBIaXRUeXBlRW51bSkgPT4gYW55O1xyXG50eXBlIFNwZWVkU3RydWN0ID0ge2N1cnI6IG51bWJlciwgZGVjOiBudW1iZXIsIGFjYzogbnVtYmVyfVxyXG5cclxuZW51bSBEZWF0aENhdXNlRW51bSB7XHJcbiAgICBPVVRfT0ZfQk9VTkRTLFxyXG4gICAgTElWRVMsXHJcbiAgICBDT0xMSVNJT05cclxufVxyXG5cclxuZW51bSBIaXRUeXBlRW51bSB7XHJcbiAgICBISVQsXHJcbiAgICBERVNUUk9ZRURcclxufVxyXG5cclxuY2xhc3MgQm91bmRhcnkge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG1pblg6IG51bWJlciwgcHVibGljIG1pblk6IG51bWJlciwgcHVibGljIG1heFg6IG51bWJlciwgcHVibGljIG1heFk6IG51bWJlcikge1xyXG4gICAgfVxyXG5cclxuICAgIGlzSW5Cb3VuZHMoeDogbnVtYmVyLCB5OiBudW1iZXIsIHNoYXBlOiBTaGFwZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB4ID49IHRoaXMubWluWCAmJiB5ID49IHRoaXMubWluWSAmJiAoeCArIHNoYXBlLmdldFdpZHRoKCkpIDw9IHRoaXMubWF4WCAmJiAoeSArIHNoYXBlLmdldEhlaWdodCgpKSA8PSB0aGlzLm1heFk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE5vQm91bmRhcnkgZXh0ZW5kcyBCb3VuZGFyeSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigwLCAwLCAwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0luQm91bmRzKHg6IG51bWJlciwgeTogbnVtYmVyLCBzaGFwZTogU2hhcGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuYWJzdHJhY3QgY2xhc3MgU2hhcGUge1xyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHB1YmxpYyBjb2xvcjogc3RyaW5nLCBwdWJsaWMgbWFzczogbnVtYmVyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGdldFdpZHRoKCk6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0SGVpZ2h0KCk6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVuZGVyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk7XHJcbn1cclxuXHJcbmNsYXNzIFJlY3RhbmdsZSBleHRlbmRzIFNoYXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIG1hc3M6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbG9yLCBtYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBnZXRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgU2hhcGUge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHJhZGl1czogbnVtYmVyLCBjb2xvcjogc3RyaW5nLCBtYXNzOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgbWFzcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDIgKiB0aGlzLnJhZGl1cztcclxuICAgIH1cclxuXHJcbiAgICBnZXRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyICogdGhpcy5yYWRpdXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKHRoaXMucmFkaXVzLCB0aGlzLnJhZGl1cywgdGhpcy5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgIH1cclxufVxyXG5cclxuYWJzdHJhY3QgY2xhc3MgR2FtZU9iamVjdFR5cGUge1xyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHB1YmxpYyBzaGFwZTogU2hhcGUsIHB1YmxpYyBib3VuZGFyeTogQm91bmRhcnksIHB1YmxpYyBtb3ZlOiBNb3ZlKSB7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBVbml0VHlwZSBleHRlbmRzIEdhbWVPYmplY3RUeXBlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBsaXZlczogbnVtYmVyLCBwdWJsaWMgc2hvdEZyZXE6IG51bWJlciwgc2hhcGU6IFNoYXBlLCBib3VuZGFyeTogQm91bmRhcnksIG1vdmU6IE1vdmUsIHB1YmxpYyBzaG90OiBTaG90VHlwZSwgcHVibGljIGJvdW50aWVzOiBCb3VudHlDYWxsYmFja1tdKSB7XHJcbiAgICAgICAgc3VwZXIoc2hhcGUsIGJvdW5kYXJ5LCBtb3ZlKVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgU2hvdFR5cGUgZXh0ZW5kcyBHYW1lT2JqZWN0VHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZG1nOiBudW1iZXIsIHNoYXBlOiBTaGFwZSwgYm91bmRhcnk6IEJvdW5kYXJ5LCBtb3ZlOiBNb3ZlKSB7XHJcbiAgICAgICAgc3VwZXIoc2hhcGUsIGJvdW5kYXJ5LCBtb3ZlKVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBFbnZpcm9ubWVudFR5cGUgZXh0ZW5kcyBHYW1lT2JqZWN0VHlwZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzaGFwZTogU2hhcGUsIGJvdW5kYXJ5OiBCb3VuZGFyeSwgbW92ZTogTW92ZSkge1xyXG4gICAgICAgIHN1cGVyKHNoYXBlLCBib3VuZGFyeSwgbW92ZSlcclxuICAgIH1cclxufVxyXG5cclxuYWJzdHJhY3QgY2xhc3MgTW92ZSB7XHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZShlbGFwc2VkVGltZTogbnVtYmVyLCByb3RhdGlvbjogbnVtYmVyID0gMCwgc3BlZWQ6IFNwZWVkU3RydWN0ID0gbnVsbCwgbW92ZVZlY3RvcjogVmVjdG9yID0gbnVsbCk6IFZlY3RvciB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IEltcGxlbWVudGVkIVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBjb3B5KCk6IE1vdmU7XHJcblxyXG4gICAgYWJzdHJhY3Qgc2V0Um90YXRpb24ocm90YXRpb246IG51bWJlcik7XHJcbn1cclxuXHJcbmNsYXNzIENvbnN0YW50TW92ZSBleHRlbmRzIE1vdmUge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHZlY3RvcjogVmVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlKGVsYXBzZWRUaW1lOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIgPSAwLCBzcGVlZDogU3BlZWRTdHJ1Y3QgPSBudWxsLCBtb3ZlVmVjdG9yOiBWZWN0b3IgPSBudWxsKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLmZyb20odGhpcy52ZWN0b3IueCAqIGVsYXBzZWRUaW1lLCB0aGlzLnZlY3Rvci55ICogZWxhcHNlZFRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjb3B5KCk6IE1vdmUge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RhbnRNb3ZlKFZlY3Rvci5mcm9tT3RoZXIodGhpcy52ZWN0b3IpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHNldFJvdGF0aW9uKHJvdGF0aW9uOiBudW1iZXIpOiBNb3ZlIHtcclxuICAgICAgICB0aGlzLnZlY3Rvci5yb3RhdGUocm90YXRpb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBEeW5hbWljTW92ZSBleHRlbmRzIE1vdmUge1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkZWNTcGVlZDogbnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlKGVsYXBzZWRUaW1lOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIsIHNwZWVkOiBTcGVlZFN0cnVjdCA9IG51bGwsIG1vdmVWZWN0b3I6IFZlY3RvciA9IG51bGwpOiBWZWN0b3Ige1xyXG4gICAgICAgIGxldCB2ZWN0b3IgPSBWZWN0b3IuZnJvbU90aGVyKG1vdmVWZWN0b3IpO1xyXG4gICAgICAgIHZlY3Rvci5zY2FsZShzcGVlZC5kZWMgPT09IDAgPyAxIDogc3BlZWQuY3VyciAvIChzcGVlZC5jdXJyICsgc3BlZWQuZGVjKSk7XHJcbiAgICAgICAgaWYgKHNwZWVkLmFjYyA+IDApIHtcclxuICAgICAgICAgICAgdmVjdG9yLmFkZChWZWN0b3IuY29uc3RydWN0KHNwZWVkLmFjYywgcm90YXRpb24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZlY3RvcjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgY29weSgpOiBNb3ZlIHtcclxuICAgICAgICByZXR1cm4gbmV3IER5bmFtaWNNb3ZlKHRoaXMuZGVjU3BlZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFJvdGF0aW9uKHJvdGF0aW9uOiBudW1iZXIpIHtcclxuICAgIH1cclxufVxyXG5cclxuY29uc3QgU2hhcGVFbnVtID0ge1xyXG4gICAgUExBWUVSOiBuZXcgUmVjdGFuZ2xlKDIwLCAzNSwgXCIjNmE3ZmVkXCIsIDApLFxyXG4gICAgQVNURVJPSURfUzogbmV3IENpcmNsZShFTkVNWV9SQURJVVMsIFwiI2ZmMjc2NlwiLCAwKSxcclxuICAgIEFTVEVST0lEX006IG5ldyBDaXJjbGUoMiAqIEVORU1ZX1JBRElVUywgXCIjYmIyYzViXCIsIDApLFxyXG4gICAgQVNURVJPSURfTDogbmV3IENpcmNsZSg0ICogRU5FTVlfUkFESVVTLCBcIiNhMzE2M2VcIiwgMCksXHJcbiAgICBTSE9UOiBuZXcgUmVjdGFuZ2xlKDUsIDUsIFwiI2ZmZmZmZlwiLCAwKSxcclxuICAgIENMT1VEOiBuZXcgUmVjdGFuZ2xlKDE1MCwgMTUwLCBcIiMwYTFlM2FcIiwgMClcclxufTtcclxuXHJcbmNvbnN0IEJvdW5kYXJ5RW51bSA9IHtcclxuICAgIE5PTkU6IG5ldyBOb0JvdW5kYXJ5KCksXHJcbiAgICBTSE9UOiBuZXcgQm91bmRhcnkoMCwgMCwgV0lEVEgsIEhFSUdIVCksXHJcbiAgICBDTE9VRDogbmV3IEJvdW5kYXJ5KC1TaGFwZUVudW0uQ0xPVUQud2lkdGgsIC1TaGFwZUVudW0uQ0xPVUQuaGVpZ2h0LCBXSURUSCArIFNoYXBlRW51bS5DTE9VRC53aWR0aCwgSEVJR0hUICsgU2hhcGVFbnVtLkNMT1VELmhlaWdodClcclxufTtcclxuXHJcbmNvbnN0IEJvdW50eUVudW0gPSB7XHJcbiAgICBTQ09SRV9TVDogKGVuZW15OiBVbml0LCBzaG90OiBHYW1lT2JqZWN0LCB0eXBlOiBIaXRUeXBlRW51bSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlID09IEhpdFR5cGVFbnVtLkRFU1RST1lFRClcclxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKDEwKTtcclxuICAgIH0sXHJcbiAgICBIRUFMVEhfU1Q6IChlbmVteTogVW5pdCwgc2hvdDogR2FtZU9iamVjdCwgdHlwZTogSGl0VHlwZUVudW0pID0+IHtcclxuICAgICAgICBpZiAodHlwZSA9PSBIaXRUeXBlRW51bS5ERVNUUk9ZRUQpXHJcbiAgICAgICAgICAgIHVwZGF0ZVN0YXR1cygwLCAxKTtcclxuICAgIH0sXHJcbiAgICBTQ09SRV9GQVNUOiAoZW5lbXk6IFVuaXQsIHNob3Q6IEdhbWVPYmplY3QsIHR5cGU6IEhpdFR5cGVFbnVtKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT0gSGl0VHlwZUVudW0uSElUKVxyXG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoMjApO1xyXG4gICAgICAgIGlmICh0eXBlID09IEhpdFR5cGVFbnVtLkRFU1RST1lFRClcclxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKDUwKTtcclxuICAgIH0sXHJcbiAgICBTQ09SRV8zMDogKGVuZW15OiBVbml0LCBzaG90OiBHYW1lT2JqZWN0LCB0eXBlOiBIaXRUeXBlRW51bSkgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlID09IEhpdFR5cGVFbnVtLkRFU1RST1lFRClcclxuICAgICAgICAgICAgdXBkYXRlU3RhdHVzKDMwKTtcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IE1vdmVUeXBlRW51bSA9IHtcclxuICAgIFBMQVlFUjogbmV3IER5bmFtaWNNb3ZlKERFQ0VMRVJBVElPTl9TUEVFRCksXHJcbiAgICBFTkVNWV9TSU1QTEU6IG5ldyBDb25zdGFudE1vdmUoVmVjdG9yLmZyb20oMCwgMC4xKSksXHJcbiAgICBQTEFZRVJfU0hPVDogbmV3IENvbnN0YW50TW92ZShWZWN0b3IuZnJvbSgwLCAtMC41KSksXHJcbiAgICBFTkVNWV9TSE9UOiBuZXcgQ29uc3RhbnRNb3ZlKFZlY3Rvci5mcm9tKDAsIDAuNCkpLFxyXG4gICAgQ0xPVUQ6IG5ldyBDb25zdGFudE1vdmUoVmVjdG9yLmZyb20oMCwgMC4wNSkpXHJcbn07XHJcblxyXG5jb25zdCBTaG90VHlwZUVudW0gPSB7XHJcbiAgICBQTEFZRVI6IG5ldyBTaG90VHlwZSgxLCBTaGFwZUVudW0uU0hPVCwgQm91bmRhcnlFbnVtLlNIT1QsIE1vdmVUeXBlRW51bS5QTEFZRVJfU0hPVCksXHJcbiAgICBFTkVNWTogbmV3IFNob3RUeXBlKDEsIFNoYXBlRW51bS5TSE9ULCBCb3VuZGFyeUVudW0uU0hPVCwgTW92ZVR5cGVFbnVtLkVORU1ZX1NIT1QpXHJcbn07XHJcblxyXG5jb25zdCBVbml0VHlwZUVudW0gPSB7XHJcbiAgICBQTEFZRVI6IG5ldyBVbml0VHlwZSgzLCAwLCBTaGFwZUVudW0uUExBWUVSLCBCb3VuZGFyeUVudW0uTk9ORSwgTW92ZVR5cGVFbnVtLlBMQVlFUiwgU2hvdFR5cGVFbnVtLlBMQVlFUiwgW10pLFxyXG4gICAgQVNURVJPSURfUzogbmV3IFVuaXRUeXBlKDEsIDAsIFNoYXBlRW51bS5BU1RFUk9JRF9TLCBCb3VuZGFyeUVudW0uTk9ORSwgTW92ZVR5cGVFbnVtLkVORU1ZX1NJTVBMRSwgU2hvdFR5cGVFbnVtLkVORU1ZLCBbXSksXHJcbiAgICBBU1RFUk9JRF9NOiBuZXcgVW5pdFR5cGUoMSwgMCwgU2hhcGVFbnVtLkFTVEVST0lEX00sIEJvdW5kYXJ5RW51bS5OT05FLCBNb3ZlVHlwZUVudW0uRU5FTVlfU0lNUExFLCBTaG90VHlwZUVudW0uRU5FTVksIFtdKSxcclxuICAgIEFTVEVST0lEX0w6IG5ldyBVbml0VHlwZSgxLCAwLCBTaGFwZUVudW0uQVNURVJPSURfTCwgQm91bmRhcnlFbnVtLk5PTkUsIE1vdmVUeXBlRW51bS5FTkVNWV9TSU1QTEUsIFNob3RUeXBlRW51bS5FTkVNWSwgW10pLFxyXG59O1xyXG5cclxuY29uc3QgRW52aXJvbm1lbnRUeXBlRW51bSA9IHtcclxuICAgIENMT1VEOiBuZXcgRW52aXJvbm1lbnRUeXBlKFNoYXBlRW51bS5DTE9VRCwgQm91bmRhcnlFbnVtLkNMT1VELCBNb3ZlVHlwZUVudW0uQ0xPVUQpXHJcbn07XHJcblxyXG4vL2VuZHJlZ2lvblxyXG5cclxuLy9yZWdpb24gR2FtZU9iamVjdHNcclxudHlwZSBIaXRDYWxsYmFjayA9IChvdGhlcjogR2FtZU9iamVjdCkgPT4gYW55O1xyXG50eXBlIERlc3Ryb3llZENhbGxiYWNrID0gKGNhdXNlOiBEZWF0aENhdXNlRW51bSkgPT4gYW55O1xyXG5cclxuYWJzdHJhY3QgY2xhc3MgR2FtZU9iamVjdCB7XHJcbiAgICBwdWJsaWMgcm90YXRpb246IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgbW92ZTogTW92ZSA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIHNwZWVkOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihwdWJsaWMgaWQ6IG51bWJlciwgcHVibGljIHR5cGU6IEdhbWVPYmplY3RUeXBlLCBwdWJsaWMgeDogbnVtYmVyLCBwdWJsaWMgeTogbnVtYmVyLCBwdWJsaWMgcm90OiBudW1iZXIsIHB1YmxpYyBvbkRlc3Ryb3llZDogRGVzdHJveWVkQ2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm1vdmUgPSB0eXBlLm1vdmUuY29weSgpLnNldFJvdGF0aW9uKHJvdCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGVsYXBzZWRUaW1lOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIgPSAwLCBtb3ZlbWVudDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IG1vdmUgPSB0aGlzLm1vdmUubW92ZShlbGFwc2VkVGltZSk7XHJcbiAgICAgICAgbGV0IG9sZCA9IFZlY3Rvci5mcm9tKHRoaXMueCwgdGhpcy55KTtcclxuICAgICAgICBpZiAodGhpcy50eXBlLmJvdW5kYXJ5LmlzSW5Cb3VuZHModGhpcy54ICsgbW92ZS54LCB0aGlzLnkgKyBtb3ZlLnksIHRoaXMudHlwZS5zaGFwZSkpIHtcclxuICAgICAgICAgICAgdGhpcy54ICs9IG1vdmUueDtcclxuICAgICAgICAgICAgdGhpcy55ICs9IG1vdmUueTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudHlwZS5ib3VuZGFyeSBpbnN0YW5jZW9mIE5vQm91bmRhcnkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2FycFRvT3RoZXJTaWRlKG9sZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSAhPSBVbml0VHlwZUVudW0uUExBWUVSKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25EZXN0cm95ZWQoRGVhdGhDYXVzZUVudW0uT1VUX09GX0JPVU5EUyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB3YXJwVG9PdGhlclNpZGUob2xkOiBWZWN0b3IpIHtcclxuICAgICAgICBpZiAodGhpcy54ID4gV0lEVEggJiYgIShvbGQueCA+IFdJRFRIKSlcclxuICAgICAgICAgICAgdGhpcy54ID0gLSB0aGlzLmdldFdpZHRoKCk7XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy54IC0gdGhpcy5nZXRXaWR0aCgpIDwgMCAmJiAhKG9sZC54IC0gdGhpcy5nZXRXaWR0aCgpIDwgMCkpXHJcbiAgICAgICAgICAgIHRoaXMueCA9IFdJRFRIO1xyXG4gICAgICAgIGlmICh0aGlzLnkgPiBIRUlHSFQgJiYgIShvbGQueSA+IEhFSUdIVCkpXHJcbiAgICAgICAgICAgIHRoaXMueSA9IC0gdGhpcy5nZXRIZWlnaHQoKTtcclxuICAgICAgICBlbHNlIGlmICh0aGlzLnkgLSB0aGlzLmdldEhlaWdodCgpIDwgMCAmJiAhKG9sZC55IC0gdGhpcy5nZXRIZWlnaHQoKSA8IDApKVxyXG4gICAgICAgICAgICB0aGlzLnkgPSBIRUlHSFQ7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDb2xsaWRpbmdXaXRoKG90aGVyOiBHYW1lT2JqZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy9UT0RPXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XHJcbiAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUodGhpcy54ICsgMC41ICogdGhpcy5nZXRXaWR0aCgpLCB0aGlzLnkgKyAwLjUgKiBwbGF5ZXIuZ2V0SGVpZ2h0KCkpO1xyXG4gICAgICAgIGNvbnRleHQucm90YXRlKHJhZCh0aGlzLnJvdGF0aW9uKSk7XHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUoLTAuNSAqIHRoaXMuZ2V0V2lkdGgoKSwgLTAuNSAqIHRoaXMuZ2V0SGVpZ2h0KCkpO1xyXG4gICAgICAgIHRoaXMudHlwZS5zaGFwZS5yZW5kZXIoY29udGV4dCk7XHJcbiAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcclxuICAgIHB1YmxpYyBnZXRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuc2hhcGUuZ2V0V2lkdGgoKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50eXBlLnNoYXBlLmdldEhlaWdodCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb2xvcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuc2hhcGUuY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLy9lbmRyZWdpb25cclxufVxyXG5cclxuY2xhc3MgVW5pdCBleHRlbmRzIEdhbWVPYmplY3Qge1xyXG4gICAgcHVibGljIG1vdmVWZWN0b3I6IFZlY3RvciA9IFZlY3Rvci56ZXJvKCk7XHJcblxyXG4gICAgcHVibGljIG9uSGl0OiBIaXRDYWxsYmFjayA9IG90aGVyID0+IHtcclxuICAgICAgICBpZiAob3RoZXIgaW5zdGFuY2VvZiBTaG90KSB7XHJcbiAgICAgICAgICAgIGlmIChvdGhlci5pbml0aWF0b3IgPT0gdGhpcy50eXBlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUuYm91bnRpZXMuZm9yRWFjaChib3VudHkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYm91bnR5KHRoaXMsIG90aGVyLCBIaXRUeXBlRW51bS5ISVQpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmxpdmVzIC09IG90aGVyLnR5cGUuZG1nO1xyXG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5saXZlcy0tO1xyXG4gICAgICAgICAgICB1cGRhdGVTdGF0dXMoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmxpdmVzIDwgMSlcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3llZChEZWF0aENhdXNlRW51bS5MSVZFUyk7XHJcbiAgICB9O1xyXG4gICAgcHVibGljIGxpdmVzOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgcHVibGljIHR5cGU6IFVuaXRUeXBlLCB4OiBudW1iZXIsIHk6IG51bWJlciwgcm90OiBudW1iZXIsIG9uRGVzdHJveWVkOiBEZXN0cm95ZWRDYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKGlkLCB0eXBlLCB4LCB5LCByb3QsIG9uRGVzdHJveWVkKTtcclxuICAgICAgICB0aGlzLmxpdmVzID0gdHlwZS5saXZlcztcclxuICAgIH1cclxuXHJcbiAgICBpc0FsaXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpdmVzID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBpc0luQm91bmRzKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuYm91bmRhcnkuaXNJbkJvdW5kcyh0aGlzLngsIHRoaXMueSwgdGhpcy50eXBlLnNoYXBlKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZWxhcHNlZFRpbWU6IG51bWJlciwgcm90YXRpb246IG51bWJlciA9IDAsIG1vdmVtZW50OiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci51cGRhdGUoZWxhcHNlZFRpbWUsIHJvdGF0aW9uLCBtb3ZlbWVudCk7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gVW5pdFR5cGVFbnVtLlBMQVlFUikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy50eXBlLnNob3RGcmVxKSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob290KClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvb3QoKTogU2hvdCB7XHJcbiAgICAgICAgbGV0IGlkID0gc2hvdElkQ291bnRlcjtcclxuICAgICAgICBsZXQgc2hvdCA9IG5ldyBTaG90KGlkLCB0aGlzLnR5cGUsIHRoaXMudHlwZS5zaG90LCB0aGlzLnggKyB0aGlzLmdldFdpZHRoKCkgLyAyLCB0aGlzLnkgKyB0aGlzLmdldEhlaWdodCgpIC8gMiwgdGhpcy5yb3RhdGlvbiwgKGNhdXNlOiBEZWF0aENhdXNlRW51bSkgPT4ge1xyXG4gICAgICAgICAgICBzaG90cy5kZWxldGUoaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubW92ZVZlY3Rvci5hZGQoVmVjdG9yLmNvbnN0cnVjdChLTk9DS19CQUNLLCB0aGlzLnJvdGF0aW9uKS5zY2FsZSgtMSkpO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSBNYXRoLm1pbihNQVhfU1BFRUQsIHRoaXMuc3BlZWQgKyAoS05PQ0tfQkFDSykpO1xyXG4gICAgICAgIHNob3RzLnNldChpZCwgc2hvdCk7XHJcbiAgICAgICAgc2hvdElkQ291bnRlcisrO1xyXG4gICAgICAgIHJldHVybiBzaG90O1xyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBQbGF5ZXIgZXh0ZW5kcyBVbml0IHtcclxuICAgIGNvbnN0cnVjdG9yKGlkOiBudW1iZXIsIHB1YmxpYyB0eXBlOiBVbml0VHlwZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJvdDogbnVtYmVyLCBvbkRlc3Ryb3llZDogRGVzdHJveWVkQ2FsbGJhY2spIHtcclxuICAgICAgICBzdXBlcihpZCwgdHlwZSwgeCwgeSwgcm90LCBvbkRlc3Ryb3llZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGVsYXBzZWRUaW1lOiBudW1iZXIsIHJvdGF0aW9uOiBudW1iZXIgPSAwLCBtb3ZlbWVudDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvbiA9IG1vZCh0aGlzLnJvdGF0aW9uICsgcm90YXRpb24gKiBST1RBVElPTl9TUEVFRCAqIGVsYXBzZWRUaW1lLCAzNjApO1xyXG4gICAgICAgIGxldCBvbGRTcGVlZCA9IHRoaXMuc3BlZWQ7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IE1hdGgubWF4KDAsIHRoaXMuc3BlZWQgLSAoREVDRUxFUkFUSU9OX1NQRUVEICogZWxhcHNlZFRpbWUgLyAxMDApKTtcclxuICAgICAgICAvLyB0aGlzLm1vdmVWZWN0b3Iuc2NhbGUob2xkU3BlZWQgPT09IDAgPyAxIDogdGhpcy5zcGVlZCAvIG9sZFNwZWVkKTtcclxuICAgICAgICBsZXQgZGVjU3BlZWQgPSBvbGRTcGVlZCAtIHRoaXMuc3BlZWQ7XHJcbiAgICAgICAgbGV0IGFjY1NwZWVkID0gMDtcclxuICAgICAgICBvbGRTcGVlZCA9IHRoaXMuc3BlZWQ7XHJcbiAgICAgICAgaWYgKG1vdmVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgPSBNYXRoLm1pbihNQVhfU1BFRUQsIHRoaXMuc3BlZWQgKyAoQUNDX1NQRUVEICogZWxhcHNlZFRpbWUgLyAxMDApKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5tb3ZlVmVjdG9yLmFkZChWZWN0b3IuY29uc3RydWN0KHRoaXMuc3BlZWQgLSBvbGRTcGVlZCwgdGhpcy5yb3RhdGlvbikpO1xyXG4gICAgICAgICAgICBhY2NTcGVlZCA9IHRoaXMuc3BlZWQgLSBvbGRTcGVlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3ZlVmVjdG9yID0gdGhpcy5tb3ZlLm1vdmUoZWxhcHNlZFRpbWUsIHRoaXMucm90YXRpb24sIHtjdXJyOiBvbGRTcGVlZCwgZGVjOiBkZWNTcGVlZCwgYWNjOiBhY2NTcGVlZH0pO1xyXG5cclxuICAgICAgICBsZXQgb2xkID0gVmVjdG9yLmZyb20odGhpcy54LCB0aGlzLnkpO1xyXG4gICAgICAgIHRoaXMueCArPSB0aGlzLm1vdmVWZWN0b3IueDtcclxuICAgICAgICB0aGlzLnkgKz0gdGhpcy5tb3ZlVmVjdG9yLnk7XHJcbiAgICAgICAgdGhpcy53YXJwVG9PdGhlclNpZGUob2xkKTtcclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgU2hvdCBleHRlbmRzIEdhbWVPYmplY3Qge1xyXG4gICAgY29uc3RydWN0b3IoaWQ6IG51bWJlciwgcHVibGljIGluaXRpYXRvcjogVW5pdFR5cGUsIHB1YmxpYyB0eXBlOiBTaG90VHlwZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJvdDogbnVtYmVyLCBvbkRlc3Ryb3llZDogRGVzdHJveWVkQ2FsbGJhY2spIHtcclxuICAgICAgICBzdXBlcihpZCwgdHlwZSwgeCwgeSwgcm90LCBvbkRlc3Ryb3llZCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDb2xsaWRpbmdXaXRoKG90aGVyOiBHYW1lT2JqZWN0KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmlzQ29sbGlkaW5nV2l0aChvdGhlcikgJiYgdGhpcy5pbml0aWF0b3IgIT09IG90aGVyLnR5cGU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIEVudmlyb25tZW50IGV4dGVuZHMgR2FtZU9iamVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCB0eXBlOiBFbnZpcm9ubWVudFR5cGUsIHg6IG51bWJlciwgeTogbnVtYmVyLCByb3Q6IG51bWJlciwgb25EZXN0cm95ZWQ6IERlc3Ryb3llZENhbGxiYWNrKSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIHR5cGUsIHgsIHksIHJvdCwgb25EZXN0cm95ZWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vL2VuZHJlZ2lvblxyXG5cclxudmFyIGZyb250Q2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxudmFyIGZyb250Q29udGV4dCA9IGZyb250Q2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbnZhciBiYWNrQ2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG5iYWNrQ2FudmFzLndpZHRoID0gV0lEVEg7XHJcbmJhY2tDYW52YXMuaGVpZ2h0ID0gSEVJR0hUO1xyXG52YXIgYmFja0NvbnRleHQgPSBiYWNrQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbnZhciBzdGFydCA9IG51bGw7XHJcbnZhciBjdXJyZW50SW5wdXQgPSB7XHJcbiAgICBzcGFjZTogZmFsc2UsXHJcbiAgICBsZWZ0OiBmYWxzZSxcclxuICAgIHJpZ2h0OiBmYWxzZSxcclxuICAgIHVwOiBmYWxzZSxcclxuICAgIGRvd246IGZhbHNlXHJcbn07XHJcbnZhciBwcmlvcklucHV0ID0ge1xyXG4gICAgc3BhY2U6IGZhbHNlLFxyXG4gICAgbGVmdDogZmFsc2UsXHJcbiAgICByaWdodDogZmFsc2UsXHJcbiAgICB1cDogZmFsc2UsXHJcbiAgICBkb3duOiBmYWxzZVxyXG59O1xyXG5cclxudmFyIHBsYXllciA9IG5ldyBQbGF5ZXIoMCwgVW5pdFR5cGVFbnVtLlBMQVlFUiwgMCwgMCwgMCwgKCkgPT4ge1xyXG4gICAgZW5kR2FtZSgpO1xyXG59KTtcclxucGxheWVyLnggPSBXSURUSCAvIDIgLSBwbGF5ZXIuZ2V0V2lkdGgoKSAvIDI7XHJcbnBsYXllci55ID0gSEVJR0hUIC0gcGxheWVyLmdldEhlaWdodCgpO1xyXG52YXIgc2NvcmUgPSAwO1xyXG52YXIgc2NvcmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY29yZV90ZXh0XCIpO1xyXG52YXIgbGl2ZXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsaXZlc190ZXh0XCIpO1xyXG5cclxudmFyIGVuZW15VGltZVRvU3Bhd24gPSAwO1xyXG52YXIgZW5lbXlJZENvdW50ZXIgPSAwO1xyXG52YXIgc2hvdElkQ291bnRlciA9IDA7XHJcbnZhciBlbnZpcm9ubWVudElkQ291bnRlciA9IDA7XHJcbi8vIEB0cy1pZ25vcmVcclxudmFyIGVuZW1pZXMgPSBuZXcgTWFwPG51bWJlciwgVW5pdD4oKTtcclxuLy8gQHRzLWlnbm9yZVxyXG52YXIgc2hvdHMgPSBuZXcgTWFwPG51bWJlciwgU2hvdD4oKTtcclxuLy8gQHRzLWlnbm9yZVxyXG52YXIgZW52aXJvbm1lbnRzID0gbmV3IE1hcDxudW1iZXIsIEVudmlyb25tZW50PigpO1xyXG52YXIgcnVubmluZzogYm9vbGVhbiA9IHRydWU7XHJcblxyXG5mdW5jdGlvbiBsb29wKHRpbWVzdGFtcCkge1xyXG4gICAgaWYgKCFydW5uaW5nKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gdGltZXN0YW1wO1xyXG4gICAgbGV0IGVsYXBzZWRUaW1lID0gdGltZXN0YW1wIC0gc3RhcnQ7XHJcbiAgICBzdGFydCA9IHRpbWVzdGFtcDtcclxuXHJcbiAgICBjcmVhdGVFbmVteShlbGFwc2VkVGltZSk7XHJcbiAgICBjcmVhdGVFbnZpcm9ubWVudCgpO1xyXG4gICAgdXBkYXRlKGVsYXBzZWRUaW1lKTtcclxuICAgIHJlbmRlcihlbGFwc2VkVGltZSk7XHJcbiAgICBwb2xsSW5wdXQoKTtcclxuXHJcbiAgICBmcm9udENvbnRleHQuY2xlYXJSZWN0KDAsIDAsIFdJRFRILCBIRUlHSFQpO1xyXG4gICAgZnJvbnRDb250ZXh0LmRyYXdJbWFnZShiYWNrQ2FudmFzLCAwLCAwKTtcclxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcclxufVxyXG5cclxuZnVuY3Rpb24gcG9sbElucHV0KCkge1xyXG4gICAgcHJpb3JJbnB1dCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY3VycmVudElucHV0KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUtleWRvd24oZXZlbnQpIHtcclxuICAgIHN3aXRjaCAoZXZlbnQua2V5KSB7XHJcbiAgICAgICAgY2FzZSAnICc6XHJcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dC5zcGFjZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxyXG4gICAgICAgIGNhc2UgJ3cnOlxyXG4gICAgICAgICAgICBjdXJyZW50SW5wdXQudXAgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxyXG4gICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICBjdXJyZW50SW5wdXQubGVmdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxyXG4gICAgICAgIGNhc2UgJ2QnOlxyXG4gICAgICAgICAgICBjdXJyZW50SW5wdXQucmlnaHQgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlkb3duKTtcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZUtleXVwKGV2ZW50KSB7XHJcbiAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xyXG4gICAgICAgIGNhc2UgJyAnOlxyXG4gICAgICAgICAgICBjdXJyZW50SW5wdXQuc3BhY2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnQXJyb3dVcCc6XHJcbiAgICAgICAgY2FzZSAndyc6XHJcbiAgICAgICAgICAgIGN1cnJlbnRJbnB1dC51cCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxyXG4gICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICBjdXJyZW50SW5wdXQubGVmdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcclxuICAgICAgICBjYXNlICdkJzpcclxuICAgICAgICAgICAgY3VycmVudElucHV0LnJpZ2h0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBoYW5kbGVLZXl1cCk7XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVFbmVteShlbGFwc2VkVGltZTogbnVtYmVyKSB7XHJcbiAgICBlbmVteVRpbWVUb1NwYXduICs9IGVsYXBzZWRUaW1lO1xyXG4gICAgaWYgKGVuZW15VGltZVRvU3Bhd24gPiBFTkVNWV9TUEFXTl9SQVRFKSB7XHJcbiAgICAgICAgZW5lbXlUaW1lVG9TcGF3biA9IDA7XHJcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgKiBFTkVNWV9TUEFXTl9QUk9CQUJJTElUWSA8IDEpIHtcclxuICAgICAgICAgICAgbGV0IGlkID0gZW5lbXlJZENvdW50ZXI7XHJcbiAgICAgICAgICAgIGxldCB0eXBlID0gVW5pdFR5cGVFbnVtLkFTVEVST0lEX007XHJcbiAgICAgICAgICAgIHN3aXRjaCAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IFVuaXRUeXBlRW51bS5BU1RFUk9JRF9MO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBVbml0VHlwZUVudW0uQVNURVJPSURfUztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbmVtaWVzLnNldChpZCwgbmV3IFVuaXQoaWQsIHR5cGUsIE1hdGgucmFuZG9tKCkgKiAoV0lEVEggLSB0eXBlLnNoYXBlLmdldFdpZHRoKCkpLCAtdHlwZS5zaGFwZS5nZXRIZWlnaHQoKSwgTWF0aC5yYW5kb20oKSAqIDM2MCwgZnVuY3Rpb24gKGNhdXNlOiBEZWF0aENhdXNlRW51bSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhdXNlID09IERlYXRoQ2F1c2VFbnVtLkxJVkVTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlLmJvdW50aWVzLmZvckVhY2goYm91bnR5ID0+IGJvdW50eSh0aGlzLCBudWxsLCBIaXRUeXBlRW51bS5ERVNUUk9ZRUQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVuZW1pZXMuZGVsZXRlKGlkKTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBlbmVteUlkQ291bnRlcisrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRW52aXJvbm1lbnQoKSB7XHJcbiAgICBzd2l0Y2ggKE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCkpIHtcclxuICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgIGxldCBpZCA9IGVudmlyb25tZW50SWRDb3VudGVyO1xyXG4gICAgICAgICAgICBlbnZpcm9ubWVudHMuc2V0KGlkLCBuZXcgRW52aXJvbm1lbnQoaWQsIEVudmlyb25tZW50VHlwZUVudW0uQ0xPVUQsIE1hdGgucmFuZG9tKCkgKiBXSURUSCwgLUVudmlyb25tZW50VHlwZUVudW0uQ0xPVUQuc2hhcGUuZ2V0SGVpZ2h0KCksIDAsIGZ1bmN0aW9uIChjYXVzZTogRGVhdGhDYXVzZUVudW0pIHtcclxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50cy5kZWxldGUodGhpcy5pZCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgZW52aXJvbm1lbnRJZENvdW50ZXIrKztcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlKGVsYXBzZWRUaW1lOiBudW1iZXIpIHtcclxuICAgIGlmIChjdXJyZW50SW5wdXQuc3BhY2UgJiYgIXByaW9ySW5wdXQuc3BhY2UpIHtcclxuICAgICAgICBwbGF5ZXIuc2hvb3QoKTtcclxuICAgIH1cclxuICAgIHBsYXllci51cGRhdGUoZWxhcHNlZFRpbWUsIGN1cnJlbnRJbnB1dC5sZWZ0ID8gLTEgOiAoY3VycmVudElucHV0LnJpZ2h0ID8gMSA6IDApLCBjdXJyZW50SW5wdXQudXApO1xyXG5cclxuICAgIGVuZW1pZXMuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZS51cGRhdGUoZWxhcHNlZFRpbWUpKTtcclxuICAgIHNob3RzLmZvckVhY2godmFsdWUgPT4gdmFsdWUudXBkYXRlKGVsYXBzZWRUaW1lKSk7XHJcblxyXG4gICAgc2hvdHMuZm9yRWFjaChzaG90ID0+IHtcclxuICAgICAgICBpZiAoc2hvdC5pc0NvbGxpZGluZ1dpdGgocGxheWVyKSkge1xyXG4gICAgICAgICAgICBwbGF5ZXIub25IaXQoc2hvdCk7XHJcbiAgICAgICAgICAgIHNob3Qub25EZXN0cm95ZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZW5lbWllcy5mb3JFYWNoKGVuZW15ID0+IHtcclxuICAgICAgICAgICAgaWYgKHNob3QuaXNDb2xsaWRpbmdXaXRoKGVuZW15KSkge1xyXG4gICAgICAgICAgICAgICAgZW5lbXkub25IaXQoc2hvdCk7XHJcbiAgICAgICAgICAgICAgICBzaG90Lm9uRGVzdHJveWVkKERlYXRoQ2F1c2VFbnVtLkNPTExJU0lPTik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfSk7XHJcbiAgICBlbnZpcm9ubWVudHMuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZS51cGRhdGUoZWxhcHNlZFRpbWUpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVuZGVyKGVsYXBzZWRUaW1lOiBudW1iZXIpIHtcclxuICAgIGJhY2tDb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBXSURUSCwgSEVJR0hUKTtcclxuXHJcbiAgICBlbnZpcm9ubWVudHMuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZS5yZW5kZXIoYmFja0NvbnRleHQpKTtcclxuXHJcbiAgICBwbGF5ZXIucmVuZGVyKGJhY2tDb250ZXh0KTtcclxuXHJcbiAgICBlbmVtaWVzLmZvckVhY2godmFsdWUgPT4gdmFsdWUucmVuZGVyKGJhY2tDb250ZXh0KSk7XHJcblxyXG4gICAgc2hvdHMuZm9yRWFjaCh2YWx1ZSA9PiB2YWx1ZS5yZW5kZXIoYmFja0NvbnRleHQpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlU3RhdHVzKHNjb3JlRGVsdGE6IG51bWJlciwgaGVhbHRoRGVsdGE6IG51bWJlciA9IDApIHtcclxuICAgIHNjb3JlICs9IHNjb3JlRGVsdGE7XHJcbiAgICBwbGF5ZXIubGl2ZXMgKz0gaGVhbHRoRGVsdGE7XHJcbiAgICBzY29yZUVsZW1lbnQuaW5uZXJUZXh0ID0gXCJcIiArIHNjb3JlO1xyXG4gICAgbGl2ZXNFbGVtZW50LmlubmVyVGV4dCA9IFwiXCIgKyBwbGF5ZXIubGl2ZXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuZEdhbWUoKSB7XHJcbiAgICBydW5uaW5nID0gZmFsc2U7XHJcbiAgICBhbGVydChcIkdhbWUgb3ZlciFcIik7XHJcbn1cclxuXHJcbndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XHJcblxyXG5cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yIHtcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IocHVibGljIHg6IG51bWJlciwgcHVibGljIHk6IG51bWJlciwgLypwcml2YXRlIG1vZFg6IG51bWJlciwgcHJpdmF0ZSBtb2RZOiBudW1iZXIqLykge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbSh4OiBudW1iZXIsIHk6IG51bWJlci8qLCBtb2RYOiBudW1iZXIsIG1vZFk6IG51bWJlciovKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih4LCB5LyosIG1vZFgsIG1vZFkqLyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmcm9tT3RoZXIob3RoZXI6IFZlY3Rvcik6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3Iob3RoZXIueCwgb3RoZXIueS8qLCBvdGhlci5tb2RYLCBvdGhlci5tb2RZKi8pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgemVybygvKm1vZFg6IG51bWJlciwgbW9kWTogbnVtYmVyKi8pOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKDAsIDAvKiwgbW9kWCwgbW9kWSovKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNvbnN0cnVjdChtYWduaXR1ZGU6IG51bWJlciwgYW5nbGU6IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IobWFnbml0dWRlICogTWF0aC5jb3MocmFkKGFuZ2xlKSksIG1hZ25pdHVkZSAqIE1hdGguc2luKHJhZChhbmdsZSkpKS5yb3RhdGUoLTkwKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNaZXJvKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnggPT0gMCAmJiB0aGlzLnkgPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbWFnbml0dWRlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkKGE6IFZlY3RvciwgYjogVmVjdG9yKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLmZyb21PdGhlcihhKS5hZGQoYik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZChvdGhlcjogVmVjdG9yKTogVmVjdG9yIHtcclxuICAgICAgICB0aGlzLnggKz0gb3RoZXIueDtcclxuICAgICAgICB0aGlzLnkgKz0gb3RoZXIueTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJvdGF0ZSh2ZWN0b3I6IFZlY3RvciwgYW5nbGU6IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5mcm9tT3RoZXIodmVjdG9yKS5yb3RhdGUoYW5nbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByb3RhdGUoYW5nbGU6IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgbGV0IG9sZFggPSB0aGlzLng7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy54ICogTWF0aC5jb3MocmFkKGFuZ2xlKSkgLSB0aGlzLnkgKiBNYXRoLnNpbihyYWQoYW5nbGUpKTtcclxuICAgICAgICB0aGlzLnkgPSBvbGRYICogTWF0aC5zaW4ocmFkKGFuZ2xlKSkgKyB0aGlzLnkgKiBNYXRoLmNvcyhyYWQoYW5nbGUpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNjYWxlKHZlY3RvcjogVmVjdG9yLCBzY2FsYXI6IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5mcm9tT3RoZXIodmVjdG9yKS5zY2FsZShzY2FsYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzY2FsZShzY2FsYXI6IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgdGhpcy54ICo9IHNjYWxhcjtcclxuICAgICAgICB0aGlzLnkgKj0gc2NhbGFyO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbm9ybWFsaXplKHZlY3RvcjogVmVjdG9yKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLmZyb21PdGhlcih2ZWN0b3IpLm5vcm1hbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYWduaXR1ZGUoKSA9PT0gMCA/IHRoaXMgOiB0aGlzLnNjYWxlKDEgLyB0aGlzLm1hZ25pdHVkZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgc3RhdGljIG1vZCh2ZWN0b3I6IFZlY3Rvcik6IFZlY3RvciB7XHJcbiAgICAvLyAgICAgcmV0dXJuIFZlY3Rvci5mcm9tT3RoZXIodmVjdG9yKS5tb2QoKTtcclxuICAgIC8vIH1cclxuICAgIC8vXHJcbiAgICAvLyBwdWJsaWMgbW9kKCk6IFZlY3RvciB7XHJcbiAgICAvLyAgICAgdGhpcy54ID0gbW9kKHRoaXMueCwgdGhpcy5tb2RYKTtcclxuICAgIC8vICAgICB0aGlzLnkgPSBtb2QodGhpcy55LCB0aGlzLm1vZFkpO1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzO1xyXG4gICAgLy8gfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1vZChuOiBudW1iZXIsIG06IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKChuICUgbSkgKyBtKSAlIG07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYWQobjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBuICogKE1hdGguUEkgLyAxODApO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==