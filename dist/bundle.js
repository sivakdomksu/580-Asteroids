!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),r=1200,h=650,o=.2,n=1,a=.4,c=.65,l=8,u=300,d=3;let p=0;var f,g,E;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES",t[t.COLLISION=2]="COLLISION"}(f||(f={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(g||(g={})),function(t){t[t.PLAYER=0]="PLAYER",t[t.ENEMY=1]="ENEMY"}(E||(E={}));class m{constructor(t,e,s,i){this.minX=t,this.minY=e,this.maxX=s,this.maxY=i}isInBounds(t,e,s){return t>=this.minX&&e>=this.minY&&t+s.getWidth()<=this.maxX&&e+s.getHeight()<=this.maxY}}class y extends m{constructor(){super(0,0,0,0)}isInBounds(t,e,s){return!0}}class w{constructor(t,e){this.color=t,this.mass=e}isCollidingWith(t,e,s){if(e instanceof O)return this.isCollidingWithRectangle(t,e,s);if(e instanceof v)return this.isCollidingWithCircle(t,e,s);throw new Error("Unknown shape type: "+e)}}class O extends w{constructor(t,e,s,i){super(s,i),this.width=t,this.height=e}getHeight(){return this.height}getWidth(){return this.width}render(t){t.fillStyle=this.color,t.fillRect(0,0,this.width,this.height)}isCollidingWithCircle(t,e,s){return e.isCollidingWithRectangle(s,this,t)}isCollidingWithRectangle(t,e,s){return t.x<s.x+e.getWidth()&&t.x+this.getWidth()>s.x&&t.y<s.y+e.getHeight()&&t.y+this.getHeight()>s.y}}class S extends O{constructor(t,e,s,i,r){super(t,e,s,i),this.char=r,this.char=this.char.charAt(0)}render(t){super.render(t),t.font="20px Arial",t.fillStyle="#ffffff";let e=t.measureText(this.char).width;t.fillText(this.char,.5*this.width-.5*e,.5*this.height+10)}}class v extends w{constructor(t,e,s){super(e,s),this.radius=t}getHeight(){return 2*this.radius}getWidth(){return 2*this.radius}render(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.radius,this.radius,this.radius,0,2*Math.PI),t.fill()}isCollidingWithRectangle(t,e,s){let r=i.clamp(this.center(t.x),s.x,s.x+e.getWidth()),h=i.clamp(this.center(t.y),s.y,s.y+e.getHeight()),o=this.center(t.x)-r,n=this.center(t.y)-h;return o*o+n*n<this.radius*this.radius}isCollidingWithCircle(t,e,s){return Math.pow(this.center(s.x)-this.center(t.x),2)+Math.pow(this.center(t.y)-this.center(s.y),2)<Math.pow(this.radius+e.radius,2)}center(t){return t+this.radius}}class L{constructor(t,e,s){this.states=t,this.boundary=e,this.move=s}}class x extends L{constructor(t,e,s,i,r,h,o,n){super(i,r,h),this.role=t,this.lives=e,this.shotFreq=s,this.shot=o,this.bounties=n}}class D extends L{constructor(t,e,s,i){super(e,s,i),this.dmg=t}}class M{constructor(){}move(t,e=0,s=null,i=null){throw new Error("Not Implemented!")}}class A extends M{constructor(t){super(),this.vector=t}move(t,e=0,s=null,r=null){return i.default.from(this.vector.x*t,this.vector.y*t)}copy(){return new A(i.default.fromOther(this.vector))}setRotation(t){return this.vector.rotate(t),this}getVector(){return this.vector}}class R extends M{constructor(t){super(),this.decSpeed=t,this.lastVector=i.default.zero()}move(t,e,s,r){let h=i.default.fromOther(r);return h.scale(0===s.dec?1:s.curr/(s.curr+s.dec)),s.acc>0&&h.add(i.default.construct(s.acc,e)),this.lastVector=i.default.fromOther(h).scale(1/t),h}copy(){return new R(this.decSpeed)}setRotation(t){return this}getVector(){return this.lastVector}}class T{constructor(t,e){this.url=t,this.q=[];for(let s=0;s<e;s++)this.q.push(new Audio(t))}play(){let t=this.q.pop();if(!t)return void console.error("Audio Pool is not big enough!",this.url);t.currentTime=0;const e=t.play();void 0!==e&&e.then(e=>{this.q.push(t)})}}class I{constructor(t,...e){this.states=[],console.log("Other",e),this.states.push(t),e.forEach(t=>this.states.push(t)),console.log("This",this.states)}getDefault(){return this.states[0]}isAllowed(t){for(let e of this.states)if(e==t)return!0;return!1}}class _{constructor(t){this.shape=t,this.takeLives=(t=>t)}toStateHolder(){return new I(this)}}class Y extends _{constructor(t,e){super(t),this.takeLives=e}toStateHolder(){return new I(this)}}const H={PLAYER:new S(20,35,"#6a7fed",10,"A"),PLAYER_SHIELD:new S(20,35,"#afb9ff",10,"A"),ASTEROID_S:new v(20,"#ff2766",10),ASTEROID_M:new v(40,"#bb2c5b",20),ASTEROID_L:new v(80,"#a3163e",30),SHOT:new O(5,5,"#ffffff",0),CLOUD:new O(150,150,"#0a1e3a",0)},C={NONE:new y,SHOT:new m(-H.ASTEROID_L.getWidth(),-H.ASTEROID_L.getHeight(),r+H.ASTEROID_L.getWidth(),h+H.ASTEROID_L.getWidth()),CLOUD:new m(-H.CLOUD.width,-H.CLOUD.height,r+H.CLOUD.width,h+H.CLOUD.height)},P={BOUNTY_S:(t,e,s)=>{s==g.DESTROYED&&(p+=50)},BOUNTY_M:(t,e,s)=>{s==g.HIT&&(p+=30)},BOUNTY_L:(t,e,s)=>{s==g.HIT&&(p+=10)}},b={PLAYER:new R(a),ENEMY_SIMPLE:new A(i.default.from(0,.1)),PLAYER_SHOT:new A(i.default.from(0,-.5)),ENEMY_SHOT:new A(i.default.from(0,.4)),CLOUD:new A(i.default.from(0,.05))},N={PLAYER:new Y(H.PLAYER,t=>t),PLAYER_SHIELD:new Y(H.PLAYER_SHIELD,()=>0)},W={PLAYER:new I(N.PLAYER,N.PLAYER_SHIELD),ASTEROID_S:new Y(H.ASTEROID_S,t=>t).toStateHolder(),ASTEROID_M:new Y(H.ASTEROID_M,t=>t).toStateHolder(),ASTEROID_L:new Y(H.ASTEROID_L,t=>t).toStateHolder(),SHOT:new _(H.SHOT).toStateHolder(),CLOUD:new _(H.CLOUD).toStateHolder()},U={PLAYER:new D(1,W.SHOT,C.SHOT,b.PLAYER_SHOT),ENEMY:new D(1,W.SHOT,C.SHOT,b.ENEMY_SHOT)},V={PLAYER:new x(E.PLAYER,3,0,W.PLAYER,C.NONE,b.PLAYER,U.PLAYER,[]),ASTEROID_S:new x(E.ENEMY,1,0,W.ASTEROID_S,C.NONE,b.ENEMY_SIMPLE,U.PLAYER,[P.BOUNTY_S]),ASTEROID_M:new x(E.ENEMY,1,0,W.ASTEROID_M,C.NONE,b.ENEMY_SIMPLE,U.ENEMY,[P.BOUNTY_M]),ASTEROID_L:new x(E.ENEMY,1,0,W.ASTEROID_L,C.NONE,b.ENEMY_SIMPLE,U.ENEMY,[P.BOUNTY_L])},k={CLOUD:new class extends L{constructor(t,e,s){super(t,e,s)}}(W.CLOUD,C.CLOUD,b.CLOUD)},B={PLAYER_SHOT:new T("audio/Shot.wav",5),COLLISION:new T("audio/Collision.wav",10)};class j{constructor(t,e,s,r,h,o){this.id=t,this.type=e,this.x=s,this.y=r,this.rot=h,this.onDestroyed=o,this.rotation=0,this.move=null,this.moveVector=i.default.zero(),this.speed=0,this.move=e.move.copy().setRotation(h),this.state=e.states.getDefault()}update(t,e=0,s=!1){this.moveVector=this.move.move(t);let r=i.default.from(this.x,this.y);this.type.boundary.isInBounds(this.x+this.moveVector.x,this.y+this.moveVector.y,this.state.shape)?(this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.type.boundary instanceof y&&this.warpToOtherSide(r)):this.type!=V.PLAYER&&this.onDestroyed(this,f.OUT_OF_BOUNDS)}warpToOtherSide(t){this.x>r?this.x=-this.getWidth():this.x+this.getWidth()<0&&(this.x=r),this.y>h?this.y=-this.getHeight():this.y+this.getHeight()<0&&(this.y=h)}isCollidingWith(t){return this.state.shape.isCollidingWith(i.default.from(this.x,this.y),t.state.shape,i.default.from(t.x,t.y))}render(t){t.save(),t.translate(this.x+.5*this.getWidth(),this.y+.5*this.getHeight()),t.rotate(i.rad(this.rotation)),t.translate(-.5*this.getWidth(),-.5*this.getHeight()),this.state.shape.render(t),t.restore()}changeState(t,e){this.type.states.isAllowed(t)&&(this.state=t,setTimeout(()=>this.state=this.type.states.getDefault(),e))}getWidth(){return this.state.shape.getWidth()}getHeight(){return this.state.shape.getHeight()}getColor(){return this.state.shape.color}getMass(){return this.state.shape.mass}}class q extends j{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e,this.lives=e.lives}onHit(t){{let e=function(t,e){let s=i.default.from(e.x+.5*e.getWidth()-(t.x+.5*t.getWidth()),e.y+.5*e.getHeight()-(t.y+.5*t.getHeight())).normalize(),r=i.default.perpendicular(s),h=i.default.dotProduct(s,t.move.getVector()),o=i.default.dotProduct(r,t.move.getVector()),n=i.default.dotProduct(s,e.move.getVector()),a=i.default.dotProduct(r,e.move.getVector()),c=o,l=a,u=(h*(t.getMass()-e.getMass())+2*e.getMass()*n)/(t.getMass()+e.getMass()),d=(n*(e.getMass()-t.getMass())+2*t.getMass()*h)/(t.getMass()+e.getMass());B.COLLISION.play();for(;t.isCollidingWith(e);)t.update(-10),e.update(-10);return{a:i.default.fromOther(s).scale(u).add(i.default.fromOther(r).scale(c)),b:i.default.fromOther(s).scale(d).add(i.default.fromOther(r).scale(l))}}(this,t);this.moveVector=e.a,t.moveVector=e.b,this.move=new A(e.a),t.move=new A(e.b),this.speed=l}this.lives<1&&(this.type.morph?function(t){let e=rt++,s=new q(e,t.type.morph,t.x,t.y,0,(t,s)=>{s==f.LIVES&&t.type.bounties.forEach(e=>e(t,null,g.DESTROYED)),nt.delete(e)});t.type=t.type.morph,nt.set(e,s),s.move=t.move.copy(),s.move.setRotation(-120),t.move.setRotation(120);for(;t.isCollidingWith(s);)t.update(10),s.update(10)}(this):this.onDestroyed(this,f.LIVES))}isAlive(){return this.lives>0}isInBounds(){return this.type.boundary.isInBounds(this.x,this.y,this.state.shape)}update(t,e=0,s=!1){if(super.update(t,e,s),this.type!==V.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}}shoot(){let t=ht,e=new z(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y+this.getHeight()/2,this.rotation,(t,e)=>{at.delete(t.id)});return this.moveVector.add(i.default.construct(c,this.rotation).scale(-1)),this.speed=Math.min(l,this.speed+c),at.set(t,e),ht++,B.PLAYER_SHOT.play(),e}}class z extends j{constructor(t,e,s,i,r,h,o){super(t,s,i,r,h,o),this.initiator=e,this.type=s}isCollidingWith(t){return super.isCollidingWith(t)&&this.initiator!==t.type}onHit(t){let e=t;this.initiator!=e.type&&(e.type.bounties.forEach(t=>{t(e,this,g.HIT)}),e.lives-=this.type.dmg,e.onHit(this),this.onDestroyed(this,f.COLLISION))}}class F extends j{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h)}onHit(t){}}var X=document.getElementById("canvas").getContext("2d"),J=document.createElement("canvas");J.width=r,J.height=h;var G=J.getContext("2d"),Z=null,K={space:!1,left:!1,right:!1,up:!1,down:!1},Q={space:!1,left:!1,right:!1,up:!1,down:!1},$=new class extends q{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e}onHit(t){t instanceof q&&t.type.role==E.ENEMY&&(this.lives-=this.state.takeLives(1),this.changeState(N.PLAYER_SHIELD,2e3)),this.lives<1&&this.onDestroyed(this,f.LIVES)}update(t,e=0,s=!1){this.rotation=i.mod(this.rotation+e*o*t,360);let r=this.speed;this.speed=Math.max(0,this.speed-a*t/100);let h=r-this.speed,c=0;r=this.speed,s&&(this.speed=Math.min(l,this.speed+n*t/100),c=this.speed-r),this.moveVector=this.move.move(t,this.rotation,{curr:r,dec:h,acc:c},this.moveVector);let u=i.default.from(this.x,this.y);this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.warpToOtherSide(u)}}(0,V.PLAYER,0,0,0,()=>{dt(),lt=!1,confirm("Game over!")&&location.reload()});$.x=r/2-$.getWidth()/2,$.y=h-$.getHeight();var tt=document.getElementById("score_text"),et=document.getElementById("lives_text"),st=document.getElementById("level_text"),it=0,rt=0,ht=0,ot=0,nt=new Map,at=new Map,ct=new Map,lt=!0;let ut=new class{constructor(t,e,s){this.levelScale=t,this.enemyCounter=e,this.cooldown=s,this.level=0,this.levelSpawns=1,this.passedSpawns=!1,this.currCooldown=0,this.state=0,this.reset()}updateLevel(t){switch(this.state){case 0:this.checkAllSpawned();break;case 1:this.checkAllDestroyed();break;case 2:this.checkCooldown(t)}return 0==this.state}reset(){this.level++,this.levelSpawns=this.levelScale(this.level),this.passedSpawns=!1,this.currCooldown=0,this.state=0}getLimit(){return this.levelSpawns}getLevel(){return this.level}checkAllSpawned(){this.enemyCounter()>=this.levelSpawns&&(this.state=1)}checkAllDestroyed(){0==this.enemyCounter()&&(this.state=2)}checkCooldown(t){this.currCooldown>this.cooldown?this.raiseLevel():this.currCooldown+=t}raiseLevel(){this.reset()}}(t=>2*t,()=>nt.size,3e3);function dt(t=null){tt.innerText=""+p,et.innerText=""+$.lives,null!==t&&(st.innerText=""+t)}V.ASTEROID_M.morph=V.ASTEROID_S,V.ASTEROID_L.morph=V.ASTEROID_M,window.addEventListener("keydown",function(t){switch(t.key){case" ":t.preventDefault(),K.space=!0;break;case"ArrowUp":case"w":t.preventDefault(),K.up=!0;break;case"ArrowLeft":case"a":t.preventDefault(),K.left=!0;break;case"ArrowRight":case"d":t.preventDefault(),K.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":K.space=!1;break;case"ArrowUp":case"w":K.up=!1;break;case"ArrowLeft":case"a":K.left=!1;break;case"ArrowRight":case"d":K.right=!1}}),window.requestAnimationFrame(function t(e){if(!lt)return;dt(ut.getLevel()),Z||(Z=e);let s=e-Z;Z=e,ut.updateLevel(s)&&function(t){if((it+=t)>u&&(it=0,Math.random()*d<1)){let t=rt,e=V.ASTEROID_M;switch(Math.floor(10*Math.random())){case 0:e=V.ASTEROID_L;break;case 1:e=V.ASTEROID_S}nt.set(t,new q(t,e,Math.random()*(r-e.states.getDefault().shape.getWidth()),-e.states.getDefault().shape.getHeight(),360*Math.random(),(e,s)=>{s==f.LIVES&&e.type.bounties.forEach(t=>t(e,null,g.DESTROYED)),nt.delete(t)})),rt++}}(s),function(){switch(Math.floor(100*Math.random())){case 1:let t=ot;ct.set(t,new F(t,k.CLOUD,Math.random()*r,-k.CLOUD.states.getDefault().shape.getHeight(),0,(t,e)=>{ct.delete(t.id)})),ot++}}(),function(t){K.space&&!Q.space&&$.shoot(),$.update(t,K.left?-1:K.right?1:0,K.up),nt.forEach(e=>e.update(t)),at.forEach(e=>e.update(t));let e=[];at.forEach(t=>{e.push({a:t,b:$}),nt.forEach(s=>{e.push({a:t,b:s})})});let s=[];nt.forEach(t=>s.push(t));for(let t=0;t<s.length;t++){e.push({a:$,b:s[t]});for(let i=t+1;i<s.length;i++)e.push({a:s[t],b:s[i]})}ct.forEach(e=>e.update(t)),function(t){t.forEach(t=>{t.a.isCollidingWith(t.b)&&t.a.onHit(t.b)})}(e)}(s),G.clearRect(0,0,r,h),ct.forEach(t=>t.render(G)),$.render(G),nt.forEach(t=>t.render(G)),at.forEach(t=>t.render(G)),Q=JSON.parse(JSON.stringify(K)),X.clearRect(0,0,r,h),X.drawImage(J,0,0),window.requestAnimationFrame(t)})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this.x=t,this.y=e}static from(t,e){return new i(t,e)}static fromOther(t){return new i(t.x,t.y)}static zero(){return new i(0,0)}static construct(t,e){return new i(t*Math.cos(r(e)),t*Math.sin(r(e))).rotate(-90)}isZero(){return 0==this.x&&0==this.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}static add(t,e){return i.fromOther(t).add(e)}add(t){return this.x+=t.x,this.y+=t.y,this}static rotate(t,e){return i.fromOther(t).rotate(e)}rotate(t){let e=this.x;return this.x=this.x*Math.cos(r(t))-this.y*Math.sin(r(t)),this.y=e*Math.sin(r(t))+this.y*Math.cos(r(t)),this}static scale(t,e){return i.fromOther(t).scale(e)}scale(t){return this.x*=t,this.y*=t,this}static normalize(t){return i.fromOther(t).normalize()}normalize(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())}static perpendicular(t){return i.fromOther(t).perpendicular()}perpendicular(){let t=this.x;return this.x=-this.y,this.y=t,this}static dotProduct(t,e){return t.x*e.x+t.y*e.y}dotProduct(t){return i.dotProduct(this,t)}}function r(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=r,e.clamp=function(t,e,s){return Math.min(Math.max(t,e),s)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,