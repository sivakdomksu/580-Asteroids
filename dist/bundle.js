!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),r=1200,h=650,o=.2,n=1,a=.4,c=.65,l=8,u=1e3,d=3;let p=0;var f,g,y;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES",t[t.COLLISION=2]="COLLISION"}(f||(f={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(g||(g={})),function(t){t[t.PLAYER=0]="PLAYER",t[t.ENEMY=1]="ENEMY"}(y||(y={}));class m{constructor(t,e,s,i){this.minX=t,this.minY=e,this.maxX=s,this.maxY=i}isInBounds(t,e,s){return t>=this.minX&&e>=this.minY&&t+s.getWidth()<=this.maxX&&e+s.getHeight()<=this.maxY}}class E extends m{constructor(){super(0,0,0,0)}isInBounds(t,e,s){return!0}}class O{constructor(t,e){this.color=t,this.mass=e}isCollidingWith(t,e,s){if(e instanceof w)return this.isCollidingWithRectangle(t,e,s);if(e instanceof v)return this.isCollidingWithCircle(t,e,s);throw new Error("Unknown shape type: "+e)}}class w extends O{constructor(t,e,s,i){super(s,i),this.width=t,this.height=e}getHeight(){return this.height}getWidth(){return this.width}render(t){t.fillStyle=this.color,t.fillRect(0,0,this.width,this.height)}isCollidingWithCircle(t,e,s){return e.isCollidingWithRectangle(s,this,t)}isCollidingWithRectangle(t,e,s){return t.x<s.x+e.getWidth()&&t.x+this.getWidth()>s.x&&t.y<s.y+e.getHeight()&&t.y+this.getHeight()>s.y}}class v extends O{constructor(t,e,s){super(e,s),this.radius=t}getHeight(){return 2*this.radius}getWidth(){return 2*this.radius}render(t){t.fillStyle=this.color,t.beginPath(),t.arc(this.radius,this.radius,this.radius,0,2*Math.PI),t.fill()}isCollidingWithRectangle(t,e,s){let r=i.clamp(this.center(t.x),s.x,s.x+e.getWidth()),h=i.clamp(this.center(t.y),s.y,s.y+e.getHeight()),o=this.center(t.x)-r,n=this.center(t.y)-h;return o*o+n*n<this.radius*this.radius}isCollidingWithCircle(t,e,s){return Math.pow(this.center(s.x)-this.center(t.x),2)+Math.pow(this.center(t.y)-this.center(s.y),2)<Math.pow(this.radius+e.radius,2)}center(t){return t+this.radius}}class S{constructor(t,e,s){this.shape=t,this.boundary=e,this.move=s}}class x extends S{constructor(t,e,s,i,r,h,o,n){super(i,r,h),this.role=t,this.lives=e,this.shotFreq=s,this.shot=o,this.bounties=n}}class M extends S{constructor(t,e,s,i){super(e,s,i),this.dmg=t}}class L{constructor(){}move(t,e=0,s=null,i=null){throw new Error("Not Implemented!")}}class T extends L{constructor(t){super(),this.vector=t}move(t,e=0,s=null,r=null){return i.default.from(this.vector.x*t,this.vector.y*t)}copy(){return new T(i.default.fromOther(this.vector))}setRotation(t){return this.vector.rotate(t),this}getVector(){return this.vector}}class I extends L{constructor(t){super(),this.decSpeed=t,this.lastVector=i.default.zero()}move(t,e,s,r){let h=i.default.fromOther(r);return h.scale(0===s.dec?1:s.curr/(s.curr+s.dec)),s.acc>0&&h.add(i.default.construct(s.acc,e)),this.lastVector=i.default.fromOther(h).scale(1/t),h}copy(){return new I(this.decSpeed)}setRotation(t){return this}getVector(){return this.lastVector}}class D{constructor(t,e){this.url=t,this.q=[];for(let s=0;s<e;s++)this.q.push(new Audio(t))}play(){let t=this.q.pop();if(!t)return void console.error("Audio Pool is not big enough!",this.url);t.currentTime=0;const e=t.play();void 0!==e&&e.then(e=>{this.q.push(t)})}}const R={PLAYER:new class extends w{constructor(t,e,s,i,r){super(t,e,s,i),this.char=r,this.char=this.char.charAt(0)}render(t){super.render(t),t.font="20px Arial",t.fillStyle="#ffffff";let e=t.measureText(this.char).width;t.fillText(this.char,.5*this.width-.5*e,.5*this.height+10)}}(20,35,"#6a7fed",10,"A"),ASTEROID_S:new v(20,"#ff2766",10),ASTEROID_M:new v(40,"#bb2c5b",20),ASTEROID_L:new v(80,"#a3163e",30),SHOT:new w(5,5,"#ffffff",0),CLOUD:new w(150,150,"#0a1e3a",0)},A={NONE:new E,SHOT:new m(-R.ASTEROID_L.getWidth(),-R.ASTEROID_L.getHeight(),r+R.ASTEROID_L.getWidth(),h+R.ASTEROID_L.getWidth()),CLOUD:new m(-R.CLOUD.width,-R.CLOUD.height,r+R.CLOUD.width,h+R.CLOUD.height)},_={BOUNTY_S:(t,e,s)=>{s==g.DESTROYED&&(p+=50)},BOUNTY_M:(t,e,s)=>{s==g.HIT&&(p+=30)},BOUNTY_L:(t,e,s)=>{s==g.HIT&&(p+=10)}},C={PLAYER:new I(a),ENEMY_SIMPLE:new T(i.default.from(0,.1)),PLAYER_SHOT:new T(i.default.from(0,-.5)),ENEMY_SHOT:new T(i.default.from(0,.4)),CLOUD:new T(i.default.from(0,.05))},Y={PLAYER:new M(1,R.SHOT,A.SHOT,C.PLAYER_SHOT),ENEMY:new M(1,R.SHOT,A.SHOT,C.ENEMY_SHOT)},b={PLAYER:new x(y.PLAYER,1,0,R.PLAYER,A.NONE,C.PLAYER,Y.PLAYER,[]),ASTEROID_S:new x(y.ENEMY,1,0,R.ASTEROID_S,A.NONE,C.ENEMY_SIMPLE,Y.PLAYER,[_.BOUNTY_S]),ASTEROID_M:new x(y.ENEMY,1,0,R.ASTEROID_M,A.NONE,C.ENEMY_SIMPLE,Y.ENEMY,[_.BOUNTY_M]),ASTEROID_L:new x(y.ENEMY,1,0,R.ASTEROID_L,A.NONE,C.ENEMY_SIMPLE,Y.ENEMY,[_.BOUNTY_L])},H={CLOUD:new class extends S{constructor(t,e,s){super(t,e,s)}}(R.CLOUD,A.CLOUD,C.CLOUD)},N={PLAYER_SHOT:new D("audio/Shot.wav",5),COLLISION:new D("audio/Collision.wav",10)};class P{constructor(t,e,s,r,h,o){this.id=t,this.type=e,this.x=s,this.y=r,this.rot=h,this.onDestroyed=o,this.rotation=0,this.move=null,this.moveVector=i.default.zero(),this.speed=0,this.move=e.move.copy().setRotation(h)}update(t,e=0,s=!1){this.moveVector=this.move.move(t);let r=i.default.from(this.x,this.y);this.type.boundary.isInBounds(this.x+this.moveVector.x,this.y+this.moveVector.y,this.type.shape)?(this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.type.boundary instanceof E&&this.warpToOtherSide(r)):this.type!=b.PLAYER&&this.onDestroyed(this,f.OUT_OF_BOUNDS)}warpToOtherSide(t){this.x>r&&!(t.x>r)?this.x=-this.getWidth():this.x+this.getWidth()<0&&!(t.x+this.getWidth()<0)&&(this.x=r),this.y>h&&!(t.y>h)?this.y=-this.getHeight():this.y+this.getHeight()<0&&!(t.y+this.getHeight()<0)&&(this.y=h)}isCollidingWith(t){return this.type.shape.isCollidingWith(i.default.from(this.x,this.y),t.type.shape,i.default.from(t.x,t.y))}render(t){t.save(),t.translate(this.x+.5*this.getWidth(),this.y+.5*this.getHeight()),t.rotate(i.rad(this.rotation)),t.translate(-.5*this.getWidth(),-.5*this.getHeight()),this.type.shape.render(t),t.restore()}getWidth(){return this.type.shape.getWidth()}getHeight(){return this.type.shape.getHeight()}getColor(){return this.type.shape.color}getMass(){return this.type.shape.mass}}class W extends P{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e,this.lives=e.lives}onHit(t){{let e=function(t,e){let s=i.default.from(e.x+.5*e.getWidth()-(t.x+.5*t.getWidth()),e.y+.5*e.getHeight()-(t.y+.5*t.getHeight())).normalize(),r=i.default.perpendicular(s),h=i.default.dotProduct(s,t.move.getVector()),o=i.default.dotProduct(r,t.move.getVector()),n=i.default.dotProduct(s,e.move.getVector()),a=i.default.dotProduct(r,e.move.getVector()),c=o,l=a,u=(h*(t.getMass()-e.getMass())+2*e.getMass()*n)/(t.getMass()+e.getMass()),d=(n*(e.getMass()-t.getMass())+2*t.getMass()*h)/(t.getMass()+e.getMass());N.COLLISION.play();for(;t.isCollidingWith(e);)t.update(-10),e.update(-10);return{a:i.default.fromOther(s).scale(u).add(i.default.fromOther(r).scale(c)),b:i.default.fromOther(s).scale(d).add(i.default.fromOther(r).scale(l))}}(this,t);this.moveVector=e.a,t.moveVector=e.b,this.move=new T(e.a),t.move=new T(e.b),this.speed=l}this.lives<1&&(this.type.morph?function(t){let e=Q++,s=new W(e,t.type.morph,t.x,t.y,0,(t,s)=>{s==f.LIVES&&t.type.bounties.forEach(e=>e(t,null,g.DESTROYED)),et.delete(e)});t.type=t.type.morph,et.set(e,s),s.move=t.move.copy(),s.move.setRotation(-120),t.move.setRotation(120);for(;t.isCollidingWith(s);)t.update(10),s.update(10)}(this):this.onDestroyed(this,f.LIVES))}isAlive(){return this.lives>0}isInBounds(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)}update(t,e=0,s=!1){if(super.update(t,e,s),this.type!==b.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}}shoot(){let t=$,e=new U(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y+this.getHeight()/2,this.rotation,(t,e)=>{st.delete(t.id)});return this.moveVector.add(i.default.construct(c,this.rotation).scale(-1)),this.speed=Math.min(l,this.speed+c),st.set(t,e),$++,N.PLAYER_SHOT.play(),e}}class U extends P{constructor(t,e,s,i,r,h,o){super(t,s,i,r,h,o),this.initiator=e,this.type=s}isCollidingWith(t){return super.isCollidingWith(t)&&this.initiator!==t.type}onHit(t){let e=t;this.initiator!=e.type&&(e.type.bounties.forEach(t=>{t(e,this,g.HIT)}),e.lives-=this.type.dmg,e.onHit(this),this.onDestroyed(this,f.COLLISION))}}class V extends P{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h)}onHit(t){}}var k=document.getElementById("canvas").getContext("2d"),B=document.createElement("canvas");B.width=r,B.height=h;var j=B.getContext("2d"),q=null,z={space:!1,left:!1,right:!1,up:!1,down:!1},F={space:!1,left:!1,right:!1,up:!1,down:!1},X=new class extends W{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e}onHit(t){t instanceof W&&t.type.role==y.ENEMY&&this.lives--,this.lives<1&&this.onDestroyed(this,f.LIVES)}update(t,e=0,s=!1){this.rotation=i.mod(this.rotation+e*o*t,360);let r=this.speed;this.speed=Math.max(0,this.speed-a*t/100);let h=r-this.speed,c=0;r=this.speed,s&&(this.speed=Math.min(l,this.speed+n*t/100),c=this.speed-r),this.moveVector=this.move.move(t,this.rotation,{curr:r,dec:h,acc:c},this.moveVector);let u=i.default.from(this.x,this.y);this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.warpToOtherSide(u)}}(0,b.PLAYER,0,0,0,()=>{ot(),rt=!1,confirm("Game over!")&&location.reload()});X.x=r/2-X.getWidth()/2,X.y=h-X.getHeight();var J=document.getElementById("score_text"),G=document.getElementById("lives_text"),Z=document.getElementById("level_text"),K=0,Q=0,$=0,tt=0,et=new Map,st=new Map,it=new Map,rt=!0;let ht=new class{constructor(t,e,s){this.levelScale=t,this.enemyCounter=e,this.cooldown=s,this.level=0,this.levelSpawns=1,this.passedSpawns=!1,this.currCooldown=0,this.state=0,this.reset()}updateLevel(t){switch(this.state){case 0:this.checkAllSpawned();break;case 1:this.checkAllDestroyed();break;case 2:this.checkCooldown(t)}return 0==this.state}reset(){this.level++,this.levelSpawns=this.levelScale(this.level),this.passedSpawns=!1,this.currCooldown=0,this.state=0}getLimit(){return this.levelSpawns}getLevel(){return this.level}checkAllSpawned(){this.enemyCounter()>=this.levelSpawns&&(this.state=1)}checkAllDestroyed(){0==this.enemyCounter()&&(this.state=2)}checkCooldown(t){this.currCooldown>this.cooldown?this.raiseLevel():this.currCooldown+=t}raiseLevel(){this.reset()}}(t=>2*t,()=>et.size,3e3);function ot(t=null){J.innerText=""+p,G.innerText=""+X.lives,null!==t&&(Z.innerText=""+t)}b.ASTEROID_M.morph=b.ASTEROID_S,b.ASTEROID_L.morph=b.ASTEROID_M,window.addEventListener("keydown",function(t){switch(t.key){case" ":t.preventDefault(),z.space=!0;break;case"ArrowUp":case"w":t.preventDefault(),z.up=!0;break;case"ArrowLeft":case"a":t.preventDefault(),z.left=!0;break;case"ArrowRight":case"d":t.preventDefault(),z.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":z.space=!1;break;case"ArrowUp":case"w":z.up=!1;break;case"ArrowLeft":case"a":z.left=!1;break;case"ArrowRight":case"d":z.right=!1}}),window.requestAnimationFrame(function t(e){if(!rt)return;ot(ht.getLevel()),q||(q=e);let s=e-q;q=e,ht.updateLevel(s)&&function(t){if((K+=t)>u&&(K=0,Math.random()*d<1)){let t=Q,e=b.ASTEROID_M;switch(Math.floor(10*Math.random())){case 0:e=b.ASTEROID_L;break;case 1:e=b.ASTEROID_S}et.set(t,new W(t,e,Math.random()*(r-e.shape.getWidth()),-e.shape.getHeight(),360*Math.random(),(e,s)=>{s==f.LIVES&&e.type.bounties.forEach(t=>t(e,null,g.DESTROYED)),et.delete(t)})),Q++}}(s),function(){switch(Math.floor(100*Math.random())){case 1:let t=tt;it.set(t,new V(t,H.CLOUD,Math.random()*r,-H.CLOUD.shape.getHeight(),0,(t,e)=>{it.delete(t.id)})),tt++}}(),function(t){z.space&&!F.space&&X.shoot(),X.update(t,z.left?-1:z.right?1:0,z.up),et.forEach(e=>e.update(t)),st.forEach(e=>e.update(t));let e=[];st.forEach(t=>{e.push({a:t,b:X}),et.forEach(s=>{e.push({a:t,b:s})})});let s=[];et.forEach(t=>s.push(t));for(let t=0;t<s.length;t++){e.push({a:X,b:s[t]});for(let i=t+1;i<s.length;i++)e.push({a:s[t],b:s[i]})}it.forEach(e=>e.update(t)),function(t){t.forEach(t=>{t.a.isCollidingWith(t.b)&&t.a.onHit(t.b)})}(e)}(s),j.clearRect(0,0,r,h),it.forEach(t=>t.render(j)),X.render(j),et.forEach(t=>t.render(j)),st.forEach(t=>t.render(j)),F=JSON.parse(JSON.stringify(z)),k.clearRect(0,0,r,h),k.drawImage(B,0,0),window.requestAnimationFrame(t)})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this.x=t,this.y=e}static from(t,e){return new i(t,e)}static fromOther(t){return new i(t.x,t.y)}static zero(){return new i(0,0)}static construct(t,e){return new i(t*Math.cos(r(e)),t*Math.sin(r(e))).rotate(-90)}isZero(){return 0==this.x&&0==this.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}static add(t,e){return i.fromOther(t).add(e)}add(t){return this.x+=t.x,this.y+=t.y,this}static rotate(t,e){return i.fromOther(t).rotate(e)}rotate(t){let e=this.x;return this.x=this.x*Math.cos(r(t))-this.y*Math.sin(r(t)),this.y=e*Math.sin(r(t))+this.y*Math.cos(r(t)),this}static scale(t,e){return i.fromOther(t).scale(e)}scale(t){return this.x*=t,this.y*=t,this}static normalize(t){return i.fromOther(t).normalize()}normalize(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())}static perpendicular(t){return i.fromOther(t).perpendicular()}perpendicular(){let t=this.x;return this.x=-this.y,this.y=t,this}static dotProduct(t,e){return t.x*e.x+t.y*e.y}dotProduct(t){return i.dotProduct(this,t)}}function r(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=r,e.clamp=function(t,e,s){return Math.min(Math.max(t,e),s)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,