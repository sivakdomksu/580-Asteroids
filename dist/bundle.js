!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(e,"__esModule",{value:!0});var o,r,s=n(1),u=800,a=600,h=s.default.from(0,-.5);!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES"}(o||(o={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(r||(r={}));var c=function(){function t(t,e,n,i){this.minX=t,this.minY=e,this.maxX=n,this.maxY=i}return t.prototype.isInBounds=function(t,e,n){return t>=this.minX&&e>=this.minY&&t+n.getWidth()<=this.maxX&&e+n.getHeight()<=this.maxY},t}(),f=function(){return function(t,e){this.color=t,this.mass=e}}(),d=function(t){function e(e,n,i,o){var r=t.call(this,i,o)||this;return r.width=e,r.height=n,r}return i(e,t),e.prototype.isInBounds=function(t,e,n){},e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e}(f),l=(function(t){function e(e,n,i){var o=t.call(this,n,i)||this;return o.radius=e,o}i(e,t),e.prototype.isInBounds=function(t,e,n){},e.prototype.getHeight=function(){return 2*this.radius},e.prototype.getWidth=function(){return 2*this.radius}}(f),function(){return function(t,e,n){this.shape=t,this.boundary=e,this.move=n}}()),p=function(t){function e(e,n,i,o,r,s,u){var a=t.call(this,i,o,r)||this;return a.lives=e,a.shotFreq=n,a.shot=s,a.bounties=u,a}return i(e,t),e}(l),y=function(t){function e(e,n,i,o){var r=t.call(this,n,i,o)||this;return r.dmg=e,r}return i(e,t),e}(l),m=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return i(e,t),e}(l),v=function(){function t(){}return t.prototype.move=function(t,e,n,i){throw void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=null),new Error("Not Implemented!")},t}(),g=function(t){function e(e,n){void 0===n&&(n=0);var i=t.call(this)||this;return i.vector=e,i.rotation=n,0!=i.rotation&&e.rotate(i.rotation),i}return i(e,t),e.prototype.move=function(t,e,n,i){return void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=null),s.default.from(this.vector.x*t,this.vector.y*t)},e.prototype.setRotation=function(t){this.rotation=t,this.vector.rotate(t)},e}(v),O=function(t){function e(e,n){var i=t.call(this)||this;return i.accVector=e,i.decSpeed=n,i}return i(e,t),e.prototype.move=function(t,e,n,i){var o=s.default.fromOther(i).normalize().scale(-this.decSpeed);return 0!=n&&(o.add(s.default.fromOther(i).add(o).scale(-.5)),o.add(s.default.fromOther(this.accVector).rotate(e)).normalize().scale(n)),o},e}(v),w={PLAYER:new d(20,35,"#6a7fed",0),ENEMY:new d(45,50,"#ff0000",0),SHOT:new d(5,5,"#ffffff",0),HEALTH_ENEMY:new d(45,50,"#91ff6f",0),BIG_ONE:new d(60,60,"#ffbb00",0),FAST_ONE:new d(40,40,"#f5a3ff",0),CLOUD:new d(150,150,"#0a1e3a",0)},E={NONE:new c(Number.MIN_VALUE,Number.MIN_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),SHOT:new c(0,0,u,a),CLOUD:new c(-w.CLOUD.width,-w.CLOUD.height,u+w.CLOUD.width,a+w.CLOUD.height)},x={PLAYER:new O(h,.08),ENEMY_SIMPLE:new g(s.default.from(0,.1)),PLAYER_SHOT:new g(s.default.from(0,-.5)),ENEMY_SHOT:new g(s.default.from(0,.4)),CLOUD:new g(s.default.from(0,.05))},_={PLAYER:new y(1,w.SHOT,E.SHOT,x.PLAYER_SHOT),ENEMY:new y(1,w.SHOT,E.SHOT,x.ENEMY_SHOT)},L={PLAYER:new p(3,0,w.PLAYER,E.NONE,x.PLAYER,_.PLAYER,[])},b={CLOUD:new m(w.CLOUD,E.CLOUD,x.CLOUD)},S=function(){function t(t,e,n,i,o){this.id=t,this.type=e,this.x=n,this.y=i,this.onDestroyed=o,this.rotation=0,this.speed=0}return t.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1);var i=this.type.move.move(t);this.type.boundary.isInBounds(this.x+i.x,this.y+i.y,this.type.shape)?(this.x+=i.x,this.y+=i.y):this.type!=L.PLAYER&&this.onDestroyed(o.OUT_OF_BOUNDS)},t.prototype.isCollidingWith=function(t){return!1},t.prototype.getWidth=function(){return this.type.shape.getWidth()},t.prototype.getHeight=function(){return this.type.shape.getHeight()},t.prototype.getColor=function(){return this.type.shape.color},t}(),M=function(t){function e(e,n,i,o,r){var s=t.call(this,e,n,i,o,r)||this;return s.type=n,s}return i(e,t),e.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1),this.rotation=s.mod(this.rotation+.2*e*t,360),this.speed=Math.max(0,this.speed-.08),console.log("Speed: ",this.speed),n?(this.speed=Math.min(20,this.speed+.5),this.moveVector.add(s.default.fromOther(h).rotate(this.rotation)).normalize().scale(this.speed*t/100)):0===this.speed?this.moveVector=s.default.zero():this.moveVector.add(s.default.fromOther(this.moveVector).normalize().scale(-.08*t/100)),this.x=s.mod(this.x+this.moveVector.x,u),this.y=s.mod(this.y+this.moveVector.y,a)},e}(function(t){function e(e,n,i,u,a){var h=t.call(this,e,n,i,u,a)||this;return h.type=n,h.moveVector=s.default.zero(),h.onHit=function(t){if(t instanceof H){if(t.initiator==h.type)return;h.type.bounties.forEach(function(e){e(h,t,r.HIT)}),h.lives-=t.type.dmg,X(0)}else h.lives--,X(0);h.lives<1&&h.onDestroyed(o.LIVES)},h.lives=n.lives,h}return i(e,t),e.prototype.isAlive=function(){return this.lives>0},e.prototype.isInBounds=function(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)},e.prototype.update=function(e,n,i){if(void 0===n&&(n=0),void 0===i&&(i=!1),t.prototype.update.call(this,e,n,i),this.type!==L.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}},e.prototype.shoot=function(){var t=V,e=new H(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y,this.rotation,function(e){k.delete(t)});return k.set(t,e),V++,e},e}(S)),H=function(t){function e(e,n,i,o,r,u,a){void 0===u&&(u=0);var h=t.call(this,e,i,o,r,a)||this;return h.initiator=n,h.type=i,h.type.move=new g(s.default.fromOther(h.type.move.vector),u),h}return i(e,t),e.prototype.isCollidingWith=function(e){return t.prototype.isCollidingWith.call(this,e)&&this.initiator!==e.type},e}(S),A=function(t){function e(e,n,i,o,r){return t.call(this,e,n,i,o,r)||this}return i(e,t),e}(S),C=document.getElementById("canvas").getContext("2d"),D=document.createElement("canvas");D.width=u,D.height=a;var U=D.getContext("2d"),N=null,T={space:!1,left:!1,right:!1,up:!1,down:!1},Y={space:!1,left:!1,right:!1,up:!1,down:!1},P=new M(0,L.PLAYER,0,0,function(){F=!1,alert("Game over!")});P.x=u/2-P.getWidth()/2,P.y=a-P.getHeight();var R=0,I=document.getElementById("score_text"),W=document.getElementById("lives_text"),V=0,B=0,j=new Map,k=new Map,z=new Map,F=!0;function X(t,e){void 0===e&&(e=0),R+=t,P.lives+=e,I.innerText=""+R,W.innerText=""+P.lives}window.addEventListener("keydown",function(t){switch(t.key){case" ":T.space=!0;break;case"ArrowUp":case"w":T.up=!0;break;case"ArrowLeft":case"a":T.left=!0;break;case"ArrowRight":case"d":T.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":T.space=!1;break;case"ArrowUp":case"w":T.up=!1;break;case"ArrowLeft":case"a":T.left=!1;break;case"ArrowRight":case"d":T.right=!1}}),window.requestAnimationFrame(function t(e){if(F){N||(N=e);var n=e-N;N=e,function(){switch(Math.floor(100*Math.random())){case 1:var t=B;z.set(t,new A(t,b.CLOUD,Math.random()*u,-b.CLOUD.shape.getHeight(),function(t){z.delete(this.id)})),B++}}(),function(t){T.space&&!Y.space&&P.shoot(),P.update(t,T.left?-1:T.right?1:0,T.up),j.forEach(function(e){return e.update(t)}),k.forEach(function(e){return e.update(t)}),k.forEach(function(t){t.isCollidingWith(P)&&(P.onHit(t),t.onDestroyed()),j.forEach(function(e){t.isCollidingWith(e)&&(e.onHit(t),t.onDestroyed())})}),z.forEach(function(e){return e.update(t)})}(n),U.clearRect(0,0,u,a),z.forEach(function(t){U.fillStyle=t.getColor(),U.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),U.save(),U.fillStyle=P.getColor(),U.translate(P.x+.5*P.getWidth(),P.y+.5*P.getHeight()),U.rotate(s.rad(P.rotation)),U.translate(-(P.x+.5*P.getWidth()),-(P.y+.5*P.getHeight())),U.fillRect(P.x,P.y,P.getWidth(),P.getHeight()),U.restore(),j.forEach(function(t){U.fillStyle=t.getColor(),U.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),k.forEach(function(t){U.fillStyle=t.getColor(),U.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),Y=JSON.parse(JSON.stringify(T)),C.clearRect(0,0,u,a),C.drawImage(D,0,0),window.requestAnimationFrame(t)}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.x=t,this.y=e}return t.from=function(e,n){return new t(e,n)},t.fromOther=function(e){return new t(e.x,e.y)},t.zero=function(){return new t(0,0)},t.prototype.isZero=function(){return 0==this.x&&0==this.y},t.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.add=function(e,n){return t.fromOther(e).add(n)},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.rotate=function(e,n){return t.fromOther(e).rotate(n)},t.prototype.rotate=function(t){var e=this.x;return this.x=this.x*Math.cos(o(t))-this.y*Math.sin(o(t)),this.y=e*Math.sin(o(t))+this.y*Math.cos(o(t)),this},t.scale=function(e,n){return t.fromOther(e).scale(n)},t.prototype.scale=function(t){return this.x*=t,this.y*=t,this},t.normalize=function(e){return t.fromOther(e).normalize()},t.prototype.normalize=function(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())},t}();function o(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,