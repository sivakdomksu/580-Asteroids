!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(1),r=1366,h=768,o=.2,n=1,a=.4,c=.65,l=8,u=1e3,d=3;var p,f,g;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES",t[t.COLLISION=2]="COLLISION"}(p||(p={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(f||(f={})),function(t){t[t.PLAYER=0]="PLAYER",t[t.ENEMY=1]="ENEMY"}(g||(g={}));class y{constructor(t,e,s,i){this.minX=t,this.minY=e,this.maxX=s,this.maxY=i}isInBounds(t,e,s){return t>=this.minX&&e>=this.minY&&t+s.getWidth()<=this.maxX&&e+s.getHeight()<=this.maxY}}class m extends y{constructor(){super(0,0,0,0)}isInBounds(t,e,s){return!0}}class E{constructor(t,e){this.color=t,this.mass=e}isCollidingWith(t,e,s){if(e instanceof w)return this.isCollidingWithRectangle(t,e,s);if(e instanceof O)return this.isCollidingWithCircle(t,e,s);throw new Error("Unknown shape type: "+e)}}class w extends E{constructor(t,e,s,i){super(s,i),this.width=t,this.height=e}getHeight(){return this.height}getWidth(){return this.width}render(t){t.fillStyle=this.color,t.fillRect(0,0,this.width,this.height)}isCollidingWithCircle(t,e,s){return e.isCollidingWithRectangle(s,this,t)}isCollidingWithRectangle(t,e,s){return t.x<s.x+e.getWidth()&&t.x+this.getWidth()>s.x&&t.y<s.y+e.getHeight()&&t.y+this.getHeight()>s.y}}class O extends E{constructor(t,e,s){super(e,s),this.radius=t}getHeight(){return 2*this.radius}getWidth(){return 2*this.radius}render(t){t.fillStyle=this.color,t.strokeStyle="#fff",t.strokeRect(0,0,2*this.radius,2*this.radius),t.beginPath(),t.arc(this.radius,this.radius,this.radius,0,2*Math.PI),t.fill()}isCollidingWithRectangle(t,e,s){let r=i.clamp(this.center(t.x),s.x,s.x+e.getWidth()),h=i.clamp(this.center(t.y),s.y,s.y+e.getHeight()),o=this.center(t.x)-r,n=this.center(t.y)-h;return o*o+n*n<this.radius*this.radius}isCollidingWithCircle(t,e,s){return Math.pow(this.center(s.x)-this.center(t.x),2)+Math.pow(this.center(t.y)-this.center(s.y),2)<Math.pow(this.radius+e.radius,2)}center(t){return t+this.radius}}class v{constructor(t,e,s){this.shape=t,this.boundary=e,this.move=s}}class x extends v{constructor(t,e,s,i,r,h,o,n){super(i,r,h),this.role=t,this.lives=e,this.shotFreq=s,this.shot=o,this.bounties=n}}class S extends v{constructor(t,e,s,i){super(e,s,i),this.dmg=t}}class M{constructor(){}move(t,e=0,s=null,i=null){throw new Error("Not Implemented!")}}class L extends M{constructor(t){super(),this.vector=t}move(t,e=0,s=null,r=null){return i.default.from(this.vector.x*t,this.vector.y*t)}copy(){return new L(i.default.fromOther(this.vector))}setRotation(t){return this.vector.rotate(t),this}getVector(){return this.vector}}class R extends M{constructor(t){super(),this.decSpeed=t,this.lastVector=i.default.zero()}move(t,e,s,r){let h=i.default.fromOther(r);return h.scale(0===s.dec?1:s.curr/(s.curr+s.dec)),s.acc>0&&h.add(i.default.construct(s.acc,e)),this.lastVector=i.default.fromOther(h).scale(1/t),h}copy(){return new R(this.decSpeed)}setRotation(t){return this}getVector(){return this.lastVector}}class A{constructor(t,e){this.url=t,this.q=[];for(let s=0;s<e;s++)this.q.push(new Audio(t))}play(){let t=this.q.pop();if(!t)return void console.error("Audio Pool is not big enough!",this.url);t.load();const e=t.play();void 0!==e&&e.then(e=>{this.q.push(t)})}}const I={PLAYER:new class extends w{constructor(t,e,s,i,r){super(t,e,s,i),this.char=r,this.char=this.char.charAt(0)}render(t){super.render(t),t.font="20px Arial",t.fillStyle="#ffffff";let e=t.measureText(this.char).width;t.fillText(this.char,.5*this.width-.5*e,.5*this.height+10)}}(20,35,"#6a7fed",10,"A"),ASTEROID_S:new O(20,"#ff2766",10),ASTEROID_M:new O(40,"#bb2c5b",20),ASTEROID_L:new O(80,"#a3163e",30),SHOT:new w(5,5,"#ffffff",0),CLOUD:new w(150,150,"#0a1e3a",0)},C={NONE:new m,SHOT:new y(0,0,r,h),CLOUD:new y(-I.CLOUD.width,-I.CLOUD.height,r+I.CLOUD.width,h+I.CLOUD.height)},T={PLAYER:new R(a),ENEMY_SIMPLE:new L(i.default.from(0,.1)),PLAYER_SHOT:new L(i.default.from(0,-.5)),ENEMY_SHOT:new L(i.default.from(0,.4)),CLOUD:new L(i.default.from(0,.05))},D={PLAYER:new S(1,I.SHOT,C.SHOT,T.PLAYER_SHOT),ENEMY:new S(1,I.SHOT,C.SHOT,T.ENEMY_SHOT)},b={PLAYER:new x(g.PLAYER,3,0,I.PLAYER,C.NONE,T.PLAYER,D.PLAYER,[]),ASTEROID_S:new x(g.ENEMY,1,0,I.ASTEROID_S,C.NONE,T.ENEMY_SIMPLE,D.PLAYER,[]),ASTEROID_M:new x(g.ENEMY,1,0,I.ASTEROID_M,C.NONE,T.ENEMY_SIMPLE,D.ENEMY,[]),ASTEROID_L:new x(g.ENEMY,1,0,I.ASTEROID_L,C.NONE,T.ENEMY_SIMPLE,D.ENEMY,[])},_={CLOUD:new class extends v{constructor(t,e,s){super(t,e,s)}}(I.CLOUD,C.CLOUD,T.CLOUD)},H={PLAYER_SHOT:new A("audio/Shot.wav",5),COLLISION:new A("audio/Collision.wav",10)};class P{constructor(t,e,s,r,h,o){this.id=t,this.type=e,this.x=s,this.y=r,this.rot=h,this.onDestroyed=o,this.rotation=0,this.move=null,this.moveVector=i.default.zero(),this.speed=0,this.move=e.move.copy().setRotation(h)}update(t,e=0,s=!1){this.moveVector=this.move.move(t);let r=i.default.from(this.x,this.y);this.type.boundary.isInBounds(this.x+this.moveVector.x,this.y+this.moveVector.y,this.type.shape)?(this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.type.boundary instanceof m&&this.warpToOtherSide(r)):this.type!=b.PLAYER&&this.onDestroyed(this,p.OUT_OF_BOUNDS)}warpToOtherSide(t){this.x>r&&!(t.x>r)?this.x=-this.getWidth():this.x+this.getWidth()<0&&!(t.x+this.getWidth()<0)&&(this.x=r),this.y>h&&!(t.y>h)?this.y=-this.getHeight():this.y+this.getHeight()<0&&!(t.y+this.getHeight()<0)&&(this.y=h)}isCollidingWith(t){return this.type.shape.isCollidingWith(i.default.from(this.x,this.y),t.type.shape,i.default.from(t.x,t.y))}render(t){t.save(),t.translate(this.x+.5*this.getWidth(),this.y+.5*this.getHeight()),t.rotate(i.rad(this.rotation)),t.translate(-.5*this.getWidth(),-.5*this.getHeight()),this.type.shape.render(t),t.restore()}getWidth(){return this.type.shape.getWidth()}getHeight(){return this.type.shape.getHeight()}getColor(){return this.type.shape.color}getMass(){return this.type.shape.mass}}class Y extends P{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e,this.lives=e.lives}onHit(t){{let e=function(t,e){let s=i.default.from(e.x+.5*e.getWidth()-(t.x+.5*t.getWidth()),e.y+.5*e.getHeight()-(t.y+.5*t.getHeight())).normalize(),r=i.default.perpendicular(s),h=i.default.dotProduct(s,t.move.getVector()),o=i.default.dotProduct(r,t.move.getVector()),n=i.default.dotProduct(s,e.move.getVector()),a=i.default.dotProduct(r,e.move.getVector()),c=o,l=a,u=(h*(t.getMass()-e.getMass())+2*e.getMass()*n)/(t.getMass()+e.getMass()),d=(n*(e.getMass()-t.getMass())+2*t.getMass()*h)/(t.getMass()+e.getMass());H.COLLISION.play();for(;t.isCollidingWith(e);)t.update(-10),e.update(-10);return{a:i.default.fromOther(s).scale(u).add(i.default.fromOther(r).scale(c)),b:i.default.fromOther(s).scale(d).add(i.default.fromOther(r).scale(l))}}(this,t);this.moveVector=e.a,t.moveVector=e.b,this.move=new L(e.a),t.move=new L(e.b)}this.lives<1&&(this.type.morph?function(t){let e=K++,s=new Y(e,t.type.morph,t.x,t.y,0,(t,s)=>{s==p.LIVES&&t.type.bounties.forEach(e=>e(t,null,f.DESTROYED)),tt.delete(e)});t.type=t.type.morph,tt.set(e,s),s.move=t.move.copy(),s.move.setRotation(-120),t.move.setRotation(120);for(;t.isCollidingWith(s);)t.update(10),s.update(10)}(this):this.onDestroyed(this,p.LIVES))}isAlive(){return this.lives>0}isInBounds(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)}update(t,e=0,s=!1){if(super.update(t,e,s),this.type!==b.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}}shoot(){let t=Q,e=new N(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y+this.getHeight()/2,this.rotation,(t,e)=>{et.delete(t.id)});return this.moveVector.add(i.default.construct(c,this.rotation).scale(-1)),this.speed=Math.min(l,this.speed+c),et.set(t,e),Q++,H.PLAYER_SHOT.play(),e}}class N extends P{constructor(t,e,s,i,r,h,o){super(t,s,i,r,h,o),this.initiator=e,this.type=s}isCollidingWith(t){return super.isCollidingWith(t)&&this.initiator!==t.type}onHit(t){let e=t;this.initiator!=e.type&&(e.type.bounties.forEach(t=>{t(e,this,f.HIT)}),e.lives-=this.type.dmg,e.onHit(this),ht(0),this.onDestroyed(this,p.COLLISION))}}class W extends P{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h)}onHit(t){}}var V=document.getElementById("canvas").getContext("2d"),k=document.createElement("canvas");k.width=r,k.height=h;var U=k.getContext("2d"),B=null,j={space:!1,left:!1,right:!1,up:!1,down:!1},q={space:!1,left:!1,right:!1,up:!1,down:!1},z=new class extends Y{constructor(t,e,s,i,r,h){super(t,e,s,i,r,h),this.type=e}onHit(t){this.lives<1&&this.onDestroyed(this,p.LIVES)}update(t,e=0,s=!1){this.rotation=i.mod(this.rotation+e*o*t,360);let r=this.speed;this.speed=Math.max(0,this.speed-a*t/100);let h=r-this.speed,c=0;r=this.speed,s&&(this.speed=Math.min(l,this.speed+n*t/100),c=this.speed-r),this.moveVector=this.move.move(t,this.rotation,{curr:r,dec:h,acc:c},this.moveVector);let u=i.default.from(this.x,this.y);this.x+=this.moveVector.x,this.y+=this.moveVector.y,this.warpToOtherSide(u)}}(0,b.PLAYER,0,0,0,()=>{it=!1,alert("Game over!")});z.x=r/2-z.getWidth()/2,z.y=h-z.getHeight();var F=0,X=document.getElementById("score_text"),J=document.getElementById("lives_text"),G=document.getElementById("level_text"),Z=0,K=0,Q=0,$=0,tt=new Map,et=new Map,st=new Map,it=!0;let rt=new class{constructor(t,e,s){this.levelScale=t,this.enemyCounter=e,this.cooldown=s,this.level=0,this.levelSpawns=1,this.passedSpawns=!1,this.currCooldown=0,this.state=0,this.reset()}updateLevel(t){switch(this.state){case 0:this.checkAllSpawned();break;case 1:this.checkAllDestroyed();break;case 2:this.checkCooldown(t)}return 0==this.state}reset(){this.level++,this.levelSpawns=this.levelScale(this.level),this.passedSpawns=!1,this.currCooldown=0,this.state=0}getLimit(){return this.levelSpawns}getLevel(){return this.level}checkAllSpawned(){this.enemyCounter()>=this.levelSpawns&&(this.state=1)}checkAllDestroyed(){0==this.enemyCounter()&&(this.state=2)}checkCooldown(t){this.currCooldown>this.cooldown?this.raiseLevel():this.currCooldown+=t}raiseLevel(){this.reset()}}(t=>2*t,()=>tt.size,3e3);function ht(t,e=0,s=null){F+=t,z.lives+=e,X.innerText=""+F,J.innerText=""+z.lives,null!==s&&(G.innerText=""+s)}b.ASTEROID_M.morph=b.ASTEROID_S,b.ASTEROID_L.morph=b.ASTEROID_M,window.addEventListener("keydown",function(t){switch(t.key){case" ":j.space=!0;break;case"ArrowUp":case"w":j.up=!0;break;case"ArrowLeft":case"a":j.left=!0;break;case"ArrowRight":case"d":j.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":j.space=!1;break;case"ArrowUp":case"w":j.up=!1;break;case"ArrowLeft":case"a":j.left=!1;break;case"ArrowRight":case"d":j.right=!1}}),window.requestAnimationFrame(function t(e){if(!it)return;ht(0,0,rt.getLevel()),B||(B=e);let s=e-B;B=e,rt.updateLevel(s)&&function(t){if((Z+=t)>u&&(Z=0,Math.random()*d<1)){let t=K,e=b.ASTEROID_M;switch(Math.floor(10*Math.random())){case 0:e=b.ASTEROID_L;break;case 1:e=b.ASTEROID_S}tt.set(t,new Y(t,e,Math.random()*(r-e.shape.getWidth()),-e.shape.getHeight(),360*Math.random(),(e,s)=>{s==p.LIVES&&e.type.bounties.forEach(t=>t(e,null,f.DESTROYED)),tt.delete(t)})),K++}}(s),function(){switch(Math.floor(100*Math.random())){case 1:let t=$;st.set(t,new W(t,_.CLOUD,Math.random()*r,-_.CLOUD.shape.getHeight(),0,(t,e)=>{st.delete(t.id)})),$++}}(),function(t){j.space&&!q.space&&z.shoot(),z.update(t,j.left?-1:j.right?1:0,j.up),tt.forEach(e=>e.update(t)),et.forEach(e=>e.update(t));let e=[];et.forEach(t=>{e.push({a:t,b:z}),tt.forEach(s=>{e.push({a:t,b:s})})});let s=[];tt.forEach(t=>s.push(t));for(let t=0;t<s.length;t++){e.push({a:z,b:s[t]});for(let i=t+1;i<s.length;i++)e.push({a:s[t],b:s[i]})}st.forEach(e=>e.update(t)),function(t){t.forEach(t=>{t.a.isCollidingWith(t.b)&&t.a.onHit(t.b)})}(e)}(s),U.clearRect(0,0,r,h),st.forEach(t=>t.render(U)),z.render(U),tt.forEach(t=>t.render(U)),et.forEach(t=>t.render(U)),q=JSON.parse(JSON.stringify(j)),V.clearRect(0,0,r,h),V.drawImage(k,0,0),window.requestAnimationFrame(t)})},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this.x=t,this.y=e}static from(t,e){return new i(t,e)}static fromOther(t){return new i(t.x,t.y)}static zero(){return new i(0,0)}static construct(t,e){return new i(t*Math.cos(r(e)),t*Math.sin(r(e))).rotate(-90)}isZero(){return 0==this.x&&0==this.y}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y)}static add(t,e){return i.fromOther(t).add(e)}add(t){return this.x+=t.x,this.y+=t.y,this}static rotate(t,e){return i.fromOther(t).rotate(e)}rotate(t){let e=this.x;return this.x=this.x*Math.cos(r(t))-this.y*Math.sin(r(t)),this.y=e*Math.sin(r(t))+this.y*Math.cos(r(t)),this}static scale(t,e){return i.fromOther(t).scale(e)}scale(t){return this.x*=t,this.y*=t,this}static normalize(t){return i.fromOther(t).normalize()}normalize(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())}static perpendicular(t){return i.fromOther(t).perpendicular()}perpendicular(){let t=this.x;return this.x=-this.y,this.y=t,this}static dotProduct(t,e){return t.x*e.x+t.y*e.y}dotProduct(t){return i.dotProduct(this,t)}}function r(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=r,e.clamp=function(t,e,s){return Math.min(Math.max(t,e),s)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,