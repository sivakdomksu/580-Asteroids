!function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var i=this&&this.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}}();Object.defineProperty(e,"__esModule",{value:!0});var o,r,s=n(1),u=800,h=600;!function(t){t[t.OUT_OF_BOUNDS=0]="OUT_OF_BOUNDS",t[t.LIVES=1]="LIVES"}(o||(o={})),function(t){t[t.HIT=0]="HIT",t[t.DESTROYED=1]="DESTROYED"}(r||(r={}));var c=function(){function t(t,e,n,i){this.minX=t,this.minY=e,this.maxX=n,this.maxY=i}return t.prototype.isInBounds=function(t,e,n){return t>=this.minX&&e>=this.minY&&t+n.getWidth()<=this.maxX&&e+n.getHeight()<=this.maxY},t}(),a=function(){return function(t,e){this.color=t,this.mass=e}}(),f=function(t){function e(e,n,i,o){var r=t.call(this,i,o)||this;return r.width=e,r.height=n,r}return i(e,t),e.prototype.isInBounds=function(t,e,n){},e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e}(a),p=(function(t){function e(e,n,i){var o=t.call(this,n,i)||this;return o.radius=e,o}i(e,t),e.prototype.isInBounds=function(t,e,n){},e.prototype.getHeight=function(){return 2*this.radius},e.prototype.getWidth=function(){return 2*this.radius}}(a),function(){return function(t,e,n){this.shape=t,this.boundary=e,this.move=n}}()),d=function(t){function e(e,n,i,o,r,s,u){var h=t.call(this,i,o,r)||this;return h.lives=e,h.shotFreq=n,h.shot=s,h.bounties=u,h}return i(e,t),e}(p),l=function(t){function e(e,n,i,o){var r=t.call(this,n,i,o)||this;return r.dmg=e,r}return i(e,t),e}(p),y=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return i(e,t),e}(p),v=function(){function t(){}return t.prototype.move=function(t,e,n,i){throw void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=null),new Error("Not Implemented!")},t}(),g=function(t){function e(e){var n=t.call(this)||this;return n.vector=e,n}return i(e,t),e.prototype.move=function(t,e,n,i){return void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=null),s.default.from(this.vector.x*t,this.vector.y*t)},e.prototype.copy=function(){return new e(s.default.fromOther(this.vector))},e.prototype.setRotation=function(t){return this.vector.rotate(t),this},e}(v),m=function(t){function e(e){var n=t.call(this)||this;return n.decSpeed=e,n}return i(e,t),e.prototype.move=function(t,e,n){return null},e.prototype.copy=function(){return new e(this.decSpeed)},e.prototype.setRotation=function(t){},e}(v),w={PLAYER:new f(20,35,"#6a7fed",0),ENEMY:new f(45,50,"#ff0000",0),SHOT:new f(5,5,"#ffffff",0),HEALTH_ENEMY:new f(45,50,"#91ff6f",0),BIG_ONE:new f(60,60,"#ffbb00",0),FAST_ONE:new f(40,40,"#f5a3ff",0),CLOUD:new f(150,150,"#0a1e3a",0)},O={NONE:new c(Number.MIN_VALUE,Number.MIN_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),SHOT:new c(0,0,u,h),CLOUD:new c(-w.CLOUD.width,-w.CLOUD.height,u+w.CLOUD.width,h+w.CLOUD.height)},E={PLAYER:new m(.08),ENEMY_SIMPLE:new g(s.default.from(0,.1)),PLAYER_SHOT:new g(s.default.from(0,-.5)),ENEMY_SHOT:new g(s.default.from(0,.4)),CLOUD:new g(s.default.from(0,.05))},x={PLAYER:new l(1,w.SHOT,O.SHOT,E.PLAYER_SHOT),ENEMY:new l(1,w.SHOT,O.SHOT,E.ENEMY_SHOT)},_={PLAYER:new d(3,0,w.PLAYER,O.NONE,E.PLAYER,x.PLAYER,[])},L={CLOUD:new y(w.CLOUD,O.CLOUD,E.CLOUD)},M=function(){function t(t,e,n,i,o,r){this.id=t,this.type=e,this.x=n,this.y=i,this.rot=o,this.onDestroyed=r,this.rotation=0,this.move=null,this.speed=0,this.move=e.move.copy().setRotation(o)}return t.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1);var i=this.move.move(t);this.type.boundary.isInBounds(this.x+i.x,this.y+i.y,this.type.shape)?(this.x+=i.x,this.y+=i.y):this.type!=_.PLAYER&&this.onDestroyed(o.OUT_OF_BOUNDS)},t.prototype.isCollidingWith=function(t){return!1},t.prototype.getWidth=function(){return this.type.shape.getWidth()},t.prototype.getHeight=function(){return this.type.shape.getHeight()},t.prototype.getColor=function(){return this.type.shape.color},t}(),b=function(t){function e(e,n,i,o,r,s){var u=t.call(this,e,n,i,o,r,s)||this;return u.type=n,u}return i(e,t),e.prototype.update=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=!1),this.rotation=s.mod(this.rotation+.2*e*t,360);var i=this.speed;this.speed=Math.max(0,this.speed-.08),this.moveVector.scale(0===i?1:this.speed/i),i=this.speed,n?(this.speed=Math.min(8,this.speed+.5),this.moveVector.add(s.default.construct(this.speed-i,this.rotation))):0===this.speed&&(this.moveVector=s.default.zero()),this.x=s.mod(this.x+this.moveVector.x,u),this.y=s.mod(this.y+this.moveVector.y,h)},e}(function(t){function e(e,n,i,u,h,c){var a=t.call(this,e,n,i,u,h,c)||this;return a.type=n,a.moveVector=s.default.zero(),a.onHit=function(t){if(t instanceof S){if(t.initiator==a.type)return;a.type.bounties.forEach(function(e){e(a,t,r.HIT)}),a.lives-=t.type.dmg,z(0)}else a.lives--,z(0);a.lives<1&&a.onDestroyed(o.LIVES)},a.lives=n.lives,a}return i(e,t),e.prototype.isAlive=function(){return this.lives>0},e.prototype.isInBounds=function(){return this.type.boundary.isInBounds(this.x,this.y,this.type.shape)},e.prototype.update=function(e,n,i){if(void 0===n&&(n=0),void 0===i&&(i=!1),t.prototype.update.call(this,e,n,i),this.type!==_.PLAYER)switch(Math.floor(Math.random()*this.type.shotFreq)){case 1:this.shoot()}},e.prototype.shoot=function(){var t=W,e=new S(t,this.type,this.type.shot,this.x+this.getWidth()/2,this.y,this.rotation,function(e){j.delete(t)});return j.set(t,e),W++,e},e}(M)),S=function(t){function e(e,n,i,o,r,s,u){var h=t.call(this,e,i,o,r,s,u)||this;return h.initiator=n,h.type=i,h}return i(e,t),e.prototype.isCollidingWith=function(e){return t.prototype.isCollidingWith.call(this,e)&&this.initiator!==e.type},e}(M),H=function(t){function e(e,n,i,o,r,s){return t.call(this,e,n,i,o,r,s)||this}return i(e,t),e}(M),A=document.getElementById("canvas").getContext("2d"),C=document.createElement("canvas");C.width=u,C.height=h;var D=C.getContext("2d"),R=null,U={space:!1,left:!1,right:!1,up:!1,down:!1},N={space:!1,left:!1,right:!1,up:!1,down:!1},T=new b(0,_.PLAYER,0,0,0,function(){F=!1,alert("Game over!")});T.x=u/2-T.getWidth()/2,T.y=h-T.getHeight();var Y=0,P=document.getElementById("score_text"),I=document.getElementById("lives_text"),W=0,B=0,V=new Map,j=new Map,k=new Map,F=!0;function z(t,e){void 0===e&&(e=0),Y+=t,T.lives+=e,P.innerText=""+Y,I.innerText=""+T.lives}window.addEventListener("keydown",function(t){switch(t.key){case" ":U.space=!0;break;case"ArrowUp":case"w":U.up=!0;break;case"ArrowLeft":case"a":U.left=!0;break;case"ArrowRight":case"d":U.right=!0}}),window.addEventListener("keyup",function(t){switch(t.key){case" ":U.space=!1;break;case"ArrowUp":case"w":U.up=!1;break;case"ArrowLeft":case"a":U.left=!1;break;case"ArrowRight":case"d":U.right=!1}}),window.requestAnimationFrame(function t(e){if(F){R||(R=e);var n=e-R;R=e,function(){switch(Math.floor(100*Math.random())){case 1:var t=B;k.set(t,new H(t,L.CLOUD,Math.random()*u,-L.CLOUD.shape.getHeight(),0,function(t){k.delete(this.id)})),B++}}(),function(t){U.space&&!N.space&&T.shoot(),T.update(t,U.left?-1:U.right?1:0,U.up),V.forEach(function(e){return e.update(t)}),j.forEach(function(e){return e.update(t)}),j.forEach(function(t){t.isCollidingWith(T)&&(T.onHit(t),t.onDestroyed()),V.forEach(function(e){t.isCollidingWith(e)&&(e.onHit(t),t.onDestroyed())})}),k.forEach(function(e){return e.update(t)})}(n),D.clearRect(0,0,u,h),k.forEach(function(t){D.fillStyle=t.getColor(),D.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),D.save(),D.fillStyle=T.getColor(),D.translate(T.x+.5*T.getWidth(),T.y+.5*T.getHeight()),D.rotate(s.rad(T.rotation)),D.translate(-(T.x+.5*T.getWidth()),-(T.y+.5*T.getHeight())),D.fillRect(T.x,T.y,T.getWidth(),T.getHeight()),D.restore(),V.forEach(function(t){D.fillStyle=t.getColor(),D.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),j.forEach(function(t){D.fillStyle=t.getColor(),D.fillRect(t.x,t.y,t.getWidth(),t.getHeight())}),N=JSON.parse(JSON.stringify(U)),A.clearRect(0,0,u,h),A.drawImage(C,0,0),window.requestAnimationFrame(t)}})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.x=t,this.y=e}return t.from=function(e,n){return new t(e,n)},t.fromOther=function(e){return new t(e.x,e.y)},t.zero=function(){return new t(0,0)},t.construct=function(e,n){return new t(e*Math.cos(o(n)),e*Math.sin(o(n))).rotate(-90)},t.prototype.isZero=function(){return 0==this.x&&0==this.y},t.prototype.magnitude=function(){return Math.sqrt(this.x*this.x+this.y*this.y)},t.add=function(e,n){return t.fromOther(e).add(n)},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.rotate=function(e,n){return t.fromOther(e).rotate(n)},t.prototype.rotate=function(t){var e=this.x;return this.x=this.x*Math.cos(o(t))-this.y*Math.sin(o(t)),this.y=e*Math.sin(o(t))+this.y*Math.cos(o(t)),this},t.scale=function(e,n){return t.fromOther(e).scale(n)},t.prototype.scale=function(t){return this.x*=t,this.y*=t,this},t.normalize=function(e){return t.fromOther(e).normalize()},t.prototype.normalize=function(){return 0===this.magnitude()?this:this.scale(1/this.magnitude())},t}();function o(t){return t*(Math.PI/180)}e.default=i,e.mod=function(t,e){return(t%e+e)%e},e.rad=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,